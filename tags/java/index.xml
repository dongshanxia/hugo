<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on </title>
    <link>http://127.0.0.1:1313/hugo/tags/java/</link>
    <description>Recent content in java on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Jan 2022 14:44:01 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jar简易自检程序</title>
      <link>http://127.0.0.1:1313/hugo/linux/shell/jar%E7%AE%80%E6%98%93%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 05 Jan 2022 14:44:01 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/shell/jar%E7%AE%80%E6%98%93%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</guid>
      <description>jar 简易自检程序  脚本  #!/bin/sh #line=&amp;#39;cat ./pid/faceKuangshi-pid&amp;#39; echo &amp;#39;自检程序开始&amp;#39; temp_pid=0; for line in `cat ./check_pid.txt` do pid_array[$temp_pid]=$(awk &amp;#39;{print}&amp;#39; $line) let temp_pid++ done echo &amp;#39;进程id:&amp;#39; echo ${pid_array[*]} temp_sh=0; for line_sh in `cat ./check_start.txt` do #cat $line_sh sh_array[$temp_sh]=$line_sh let temp_sh++ done echo &amp;#39;进程命令:&amp;#39; echo ${sh_array[*]} pid_length=${#pid_array[@]} sh_length=${#sh_array[@]} if [ $pid_length == $sh_length ];then echo &amp;#34;自检查程序开始&amp;#34; for ((i=0;i&amp;lt;$pid_length;i++)) do echo ${pid_array[$i]} #为方便检查，加了打印 ps -p ${pid_array[$i]} if [ $? -eq 0 ]; then echo &amp;#34;app 存在&amp;#34; else echo &amp;#34;app 不存在&amp;#34; ${sh_array[$i]} fi	done	else echo &amp;#39;左右边的两个程序 不一样。&amp;#39; fi #ps -p 22 #if [ $?</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>http://127.0.0.1:1313/hugo/java/java/</link>
      <pubDate>Wed, 05 Jan 2022 14:41:19 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/java/</guid>
      <description>java杂相关 strace
一、java命令 debug 命令 -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8089 jvm jstat jstat -gc 12698 1s 30 参数说明：S0C：第一个幸存区的大小 S1C：第二个幸存区的大小 S0U：第一个幸存区的使用大小 S1U：第二个幸存区的使用大小 EC：伊甸园区的大小 EU：伊甸园区的使用大小 OC：老年代大小 OU：老年代使用大小 MC：方法区大小 MU：方法区使用大小 CCSC:压缩类空间大小 CCSU:压缩类空间使用大小 YGC：年轻代垃圾回收次数 YGCT：年轻代垃圾回收消耗时间 FGC：老年代垃圾回收次数 FGCT：老年代垃圾回收消耗时间 GCT：垃圾回收消耗总时间 java的keytool keytool相关命令 需要补充 keytool -genkeypair \ -alias test-jwt \ -validity 3650 \ -keyalg RSA \ -dname &amp;#34;CN=jwt,OU=jtw,O=jtw,L=zurich,S=zurich,C=CH&amp;#34; \ -keypass test123 \ -keystore test-jwt.jks \ -storepass test123 keytool -list -rfc --keystore test-jwt.jks | openssl x509 -inform pem -pubkey log4j log4j.properties相关配置 # Set everything to be logged to the console # 中间有个D 是往下的 对应的日志 log4j.</description>
    </item>
    
  </channel>
</rss>
