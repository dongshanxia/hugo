<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>service on </title>
    <link>http://127.0.0.1:1313/hugo/tags/service/</link>
    <description>Recent content in service on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Feb 2022 11:23:20 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/tags/service/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service</title>
      <link>http://127.0.0.1:1313/hugo/linux/service/</link>
      <pubDate>Fri, 11 Feb 2022 11:23:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/service/</guid>
      <description>linux的Service之旅 1.service 服务权限  systemd有系统和用户区分；  系统（/user/lib/systemd/system/） 用户（/etc/lib/systemd/user/）     一般系统管理员手工创建的单元文件建议存放在/etc/systemd/system/目录下面。
 2.Service 文件说明 [Unit] Description=nginx - high performance web server Documentation=http://nginx.org/en/docs/ After=network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target 2.1 Unit  Description: 服务的简单描述 Documentation：服务的操作文档地址 Before: 定义启动顺序  Before=xxx.service,代表本服务在xxx.service启动之前启动 与 After 相反，在启动指定的任一个模块之前，都会首先确保当前服务已经运行。   After: 定义启动顺序  After=xxx.service,代表本服务在xxx.service之后启动。 与 Requires 相似，但会在后面列出的所有模块全部启动完成以后，才会启动当前的服务。   Requires：这个单元启动了，它需要的单元也会被启动；它需要的单元被停止了，这个单元也停止了。 Wants：推荐使用。与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模块启动是否成功 BindsTo：与 Requires 相似，但是一种更强的关联。启动这个服务时会同时启动列出的所有模块，当有模块启动失败时终止当前服务。反之，只要列出的模块全部启动以后，也会自动启动当前服务。并且这些模块中有任意一个出现意外结束或重启，这个服务会跟着终止或重启。 PartOf：这是一个 BindTo 作用的子集，仅在列出的任何模块失败或重启时，终止或重启当前服务，而不会随列出模块的启动而启动。 OnFailure：当这个模块启动失败时，就自动启动列出的每个模块。 Conflicts ： 与这个模块有冲突的模块，如果列出模块中有已经在运行的，这个服务就不能启动，反之亦然。   上面这些配置中，除了 Description 外，都能够被添加多次。比如前面第一个例子中的After参数在一行中使用空格分隔指定所有值，也可以像第二个例子中那样使用多个After参数，在每行参数中指定一个值。</description>
    </item>
    
  </channel>
</rss>
