<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javae on My New Hugo Site</title>
    <link>http://127.0.0.1:1313/hugo/java/</link>
    <description>Recent content in Javae on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Nov 2021 10:27:57 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringCloud &#43; SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题</title>
      <link>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 24 Nov 2021 10:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>SpringCloud + SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题 场景: 公司以前的框架统一使用Post请求，传入参数为一个定义的公共类，类里面有个String类型的bean字段传入json字符串作为传参，emmm就想给他改成restful风格，在传入参数公共类无法改变的情况下，Get请求会传入特殊字符，导致400错误。例如：
1  localhost:10001/verify/compreport/month?data={&amp;#34;compRefOwid&amp;#34;:&amp;#34;1448487922485252098&amp;#34;, &amp;#34;yhMonth&amp;#34;:&amp;#34;2021-10&amp;#34;}   原因： Tomcat的新版本中增加了一个新特性，就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp;amp; = + $ , / ? # [ ])。
解决方案选择：  前端请求时encode特殊字段(算了，不能因为自己的原因加大前端工作量) 改用post请求(emmm没有办法的办法,看着难受就是想要改了) 改Tomcat配置文件(由于是springboot项目，内嵌了tomcat，不方便修改，好吧就是我比较菜) 在后端代码层面解决这个问题  解决方法： 其他服务：由于使用的是内嵌的tomcat，网上常见的 解决spring boot请求包含非法字符问题 The valid characters are defined in RFC 7230 and RFC 3986 错误 配置TomcatServletWebServerFactory的方式使用时会导致两个TomcatServletWebServerFactory使springboot项目报错Unable to start ServletWebServerApplicationContext due to multiple ServletWebServerFactory beans而无法启动。而使用yml配置的方式也无法生效。
1 2 3 4 5 6 7 8 9  server:tomcat:relaxed-query-chars:- &amp;#34;&amp;lt;&amp;#34;- &amp;#34;&amp;gt;&amp;#34;- &amp;#34;[&amp;#34;- &amp;#34;]&amp;#34;- &amp;#34;{&amp;#34;- &amp;#34;}&amp;#34;  随后参考了继承WebServerFactoryCustomizer的方式来修改Tomcat配置</description>
    </item>
    
    <item>
      <title>SkyWalking搭建(一)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Tue, 27 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>基于 docker 部署 skywalking 并实现 SpringBoot 全链路监控 [toc]
一、安装环境部署 下载镜像：
1 2 3  $ docker pull docker pull elasticsearch:7.10.1 $ docker pull apache/skywalking-oap-server:8.3.0-es7 $ docker pull apache/skywalking-ui:8.3.0   1.1 Docker 中安装 Elasticsearch7.6.2（方式一） 安装 Elasticsearch
注意：使用版本为 7.6.2，你可以选择其他版本 拉取镜像
1  docker pull elasticsearch:7.6.2   启动容器
1 2 3  docker run --restart=always -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; \ -e ES_JAVA_OPTS=&amp;#34;-Xms512m -Xmx512m&amp;#34; \ --name=&amp;#39;elasticsearch&amp;#39; --cpuset-cpus=&amp;#34;1&amp;#34; -m 2G -d elasticsearch:7.</description>
    </item>
    
    <item>
      <title>SkyWalking搭配springboot应用(三)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</guid>
      <description>上传springboot的jar包 1  cd /opt/jar   修改agent配置 1 2 3 4 5 6 7  cd /opt/software/skywalking/apache-skywalking-apm-bin mkdir /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot cp /opt/software/skywalking/apache-skywalking-apm-bin/agent/* /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot # 修改应用名称 vim /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/config/agent.config   启动应用 1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking监控mysql(四)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</guid>
      <description>  准备以mysql为数据库的springboot应用
  上传jar到指定目录
  使用java-agent启动springboot应用
1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar      可以在ui服务上看到，从用户请求到mysql的过程，还可以看到执行了什么sql,方便查找问题
  </description>
    </item>
    
    <item>
      <title>SkyWalking配合tomcat使用(二)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</guid>
      <description>上传tomcat至服务器 1 2  #下载tomcat8 https://tomcat.apache.org/download-80.cgi   修改tomcat配置 1 2 3 4  # 端口修改8081 vim /opt/software/apache-tomcat-8.5.68/conf/server.xml # 修改tomcat启动方式 在加catalina.sh最上面！ CATALINA_OPTS=&amp;#34;$CATALINA_OPTS-javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar&amp;#34;; export CATALINA_OPTS   上传springMvc的war包 1  cd /opt/software/apache-tomcat-8.5.68/webapps/   启动tomcat 1  ./opt/software/apache-tomcat-8.5.68/bin/startup.sh    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking配置覆盖(五)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</guid>
      <description>之前使用agent，我们需要每起一个应用都cp一份agent文件，因为应用名称实在agen.config中配置的，为了避免这么麻烦，可以利用配置覆盖，使用同一个agent文件达到不同配置的目的
 配置覆盖 默认情况下，SkyWalking为agent提供了agent.config配置文件。
配置覆盖意味着用户可以通过系统属性或agent选项覆盖配置文件中的配置。 title: &amp;ldquo;skywalking配置覆盖&amp;rdquo; date: 2021-07-13T16:27:57+08:00 draft: false author: &amp;ldquo;ggball&amp;rdquo; tags: [&amp;ldquo;skywalking&amp;rdquo;] categories: [&amp;ldquo;java&amp;rdquo;] description: &amp;ldquo;skywalking配置覆盖&amp;rdquo; 系统属性 使用 skywalking. + 配置文件中的配置名 作为系统属性的配置名来覆盖配置文件中的值。
  为什么需要这个前缀？
因为agent系统属性是和目标应用共享的，加前缀是为了避免冲突。
  例子
通过下面的系统属性覆盖agent.application_code。
1  -Dskywalking.agent.application_code=31200   实际案例
1 2 3 4 5 6  -Dskywalking.agent.service_name=skywalking_mysql #实际语句 java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar \ -Dskywalking.agent.service_name=skywalking_mysql \ /opt/jar/mysql-boot.jar     java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar
-Dskywalking.agent.service_name=transaction1
/opt/jar/transaction1.jar
&amp;ndash;PROFILE=test
&amp;ndash;server.port=8002 &amp;amp;
java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar</description>
    </item>
    
  </channel>
</rss>
