<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javae on My New Hugo Site</title>
    <link>http://127.0.0.1:1313/hugo/java/</link>
    <description>Recent content in Javae on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Dec 2021 12:19:57 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java日志体系</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Wed, 08 Dec 2021 12:19:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</guid>
      <description>java日志体系 常用日志框架
 Log4j：Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j 2：Apache Log4j 2是Apache开发的一款Log4j的升级产品。 Commons Logging：Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging。Apache推出了JCL（Jakarta Commons Logging），它只是定义了一套日志接口（其内部也提供一个Simple Log的简单实现），JCL也是一套接口规范，支持运行时动态加载日志组件的实现。也就是说，在应用程序代码中，只需调用Commons Logging的接口，底层实现可以是Log4j，也可以是JUL SLF4J：全称为Simple Logging Facade for Java，类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。 Logback：是一套日志组件的实现，属于SLF4J阵营。 JUL：全称是Java Util Logging，是JDK1.4以后提供的日志实现。  mybatis日志体系 日志接口 定义了打印日志的级别
日志实现 配置日志框架的三种方式 1. 手动指定日志框架 1.先确定日志的Constructor对象
2.再利用Constructor对象和类名创建日志对象
3.打印日志的功能交给其他对象
2. 自动配置日志框架 如果不指定日志框架，mybatis也会尝试去找日志的实现
LogFactory中有静态代码块，会率先执行里面的代码，顺序执行（MyBatis查找日志框架的顺序为SLF4J→JCL→Log4j2→Log4j→JUL→No Logging），注意这里的run不是线程的run的概念，单纯只是匿名函数，传入Runnable对象，会执行它的run方法而已
比如会先执行第一个useSlf4jLogging 方法，如果找不到Slf4j对应的jar包，会抛出异常，但是不做任何处理，则继续执行下一个useCommonsLogging方法，如果找到了对应的jar包，会创建
Constructor对象在LogFactory对象里，然后继续执行tryImplementation、useLog4JLogging方法，每次都会判断Constructor对象为空，如果不为空则不会执行Runnable对象的run方法，从而实现自动确定日志框架。
3. 配置文件指定日志框架 项目启动时，会去读取mybatis配置文件，将logImpl的值set到configuration对象，如果有配置日志实现，configuration对象会在调用setLogImpl，来创建指定日志的Constructor对象
总结 三种配置日志框架的方法，了解怎么把日志实现交给mybatis，mybatis如何设置日志框架的， 日志框架设计的很巧妙，接口和实现完全分开来，用户可以随意搭配实现。</description>
    </item>
    
    <item>
      <title>mybatis拦截器执行过程</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 08 Dec 2021 12:19:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</guid>
      <description>m[toc]
mybatis的拦截器本人平时也很少用到，没了解之前，也只是知道运用到了动态代理用来增强方法的功能，但是不了解其中的原理。为了更好的使用mybatis，这次，我记录下我所了解的mybatis的原理，本文不一定完全正确，可能有理解不到位的地方。
1、使用mybatis的拦截器 像平常使用mybatis框架时，如果哪句sql报错了，我们可以通过控制台或日志打印的sql去查看sql的问题，但是如果sql有太多的参数，其实是很不方便的，自己还得手动去把一个一个参数给设置上，有些浪费时间，这时候就可以利用mybatis的拦截器去帮我们把参数给设置上。
 配置步骤
 1.创建拦截器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  @Intercepts({ @Signature(type = StatementHandler.class, method = &amp;#34;query&amp;#34;, args = {Statement.class, ResultHandler.class}), @Signature(type = StatementHandler.class, method = &amp;#34;update&amp;#34;, args = {Statement.class}), @Signature(type = StatementHandler.class, method = &amp;#34;batch&amp;#34;, args = {Statement.class}) }) public class SlowSqlInterceptor implements Interceptor { @Override public Object intercept(Invocation invocation) throws InvocationTargetException, IllegalAccessException { // 主要逻辑 拼接参数到sql，并打印  } @Override public Object plugin(Object target) { // 创建代理对象  return Plugin.</description>
    </item>
    
    <item>
      <title>mybatis核心组件</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 08 Dec 2021 12:19:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  sequenceDiagram participant SqlSession participant Excutor participant StatementHandler participant parameterHandler participant ResultSetHandler participant TypeHandler participant ResultSet participant JDBC SqlSession-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;StatementHandler: StatementHandler--&amp;gt;&amp;gt;parameterHandler: StatementHandler--&amp;gt;&amp;gt;JDBC: parameterHandler--&amp;gt;&amp;gt;TypeHandler: parameterHandler-&amp;gt;&amp;gt;JDBC: JDBC-&amp;gt;&amp;gt;ResultSet: ResultSet--&amp;gt;&amp;gt;TypeHandler: ResultSet--&amp;gt;&amp;gt;ResultSetHandler: TypeHandler--&amp;gt;&amp;gt;ResultSetHandler: ResultSetHandler-&amp;gt;&amp;gt;StatementHandler: StatementHandler-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;SqlSession: Note left of SqlSession: asa   1 2 3 4  flowchart TD subgraph configuration mappedStatement1 --&amp;gt; mappedStatement2 end   configuration:</description>
    </item>
    
    <item>
      <title>mybati缓存了解</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Wed, 08 Dec 2021 12:19:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</guid>
      <description>mybatis的缓存 首先来看下mybatis对缓存的规范，规范嘛就是定义的接口啦。
缓存接口 ​	Cache接口 定义了缓存的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  public interface Cache { /**获取缓存的id * @return The identifier of this cache */ String getId(); /**添加缓存 * @param key Can be any object but usually it is a {@link CacheKey} * @param value The result of a select.</description>
    </item>
    
    <item>
      <title>SpringCloud &#43; SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题</title>
      <link>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 24 Nov 2021 10:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>SpringCloud + SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题 场景: 公司以前的框架统一使用Post请求，传入参数为一个定义的公共类，类里面有个String类型的bean字段传入json字符串作为传参，emmm就想给他改成restful风格，在传入参数公共类无法改变的情况下，Get请求会传入特殊字符，导致400错误。例如：
1  localhost:10001/verify/compreport/month?data={&amp;#34;compRefOwid&amp;#34;:&amp;#34;1448487922485252098&amp;#34;, &amp;#34;yhMonth&amp;#34;:&amp;#34;2021-10&amp;#34;}   原因： Tomcat的新版本中增加了一个新特性，就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp;amp; = + $ , / ? # [ ])。
解决方案选择：  前端请求时encode特殊字段(算了，不能因为自己的原因加大前端工作量) 改用post请求(emmm没有办法的办法,看着难受就是想要改了) 改Tomcat配置文件(由于是springboot项目，内嵌了tomcat，不方便修改，好吧就是我比较菜) 在后端代码层面解决这个问题  解决方法： 其他服务：由于使用的是内嵌的tomcat，网上常见的 解决spring boot请求包含非法字符问题 The valid characters are defined in RFC 7230 and RFC 3986 错误 配置TomcatServletWebServerFactory的方式使用时会导致两个TomcatServletWebServerFactory使springboot项目报错Unable to start ServletWebServerApplicationContext due to multiple ServletWebServerFactory beans而无法启动。而使用yml配置的方式也无法生效。
1 2 3 4 5 6 7 8 9  server:tomcat:relaxed-query-chars:- &amp;#34;&amp;lt;&amp;#34;- &amp;#34;&amp;gt;&amp;#34;- &amp;#34;[&amp;#34;- &amp;#34;]&amp;#34;- &amp;#34;{&amp;#34;- &amp;#34;}&amp;#34;  随后参考了继承WebServerFactoryCustomizer的方式来修改Tomcat配置</description>
    </item>
    
    <item>
      <title>SkyWalking搭建(一)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Tue, 27 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>基于 docker 部署 skywalking 并实现 SpringBoot 全链路监控 [toc]
一、安装环境部署 下载镜像：
1 2 3  $ docker pull docker pull elasticsearch:7.10.1 $ docker pull apache/skywalking-oap-server:8.3.0-es7 $ docker pull apache/skywalking-ui:8.3.0   1.1 Docker 中安装 Elasticsearch7.6.2（方式一） 安装 Elasticsearch
注意：使用版本为 7.6.2，你可以选择其他版本 拉取镜像
1  docker pull elasticsearch:7.6.2   启动容器
1 2 3  docker run --restart=always -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; \ -e ES_JAVA_OPTS=&amp;#34;-Xms512m -Xmx512m&amp;#34; \ --name=&amp;#39;elasticsearch&amp;#39; --cpuset-cpus=&amp;#34;1&amp;#34; -m 2G -d elasticsearch:7.</description>
    </item>
    
    <item>
      <title>SkyWalking搭配springboot应用(三)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</guid>
      <description>上传springboot的jar包 1  cd /opt/jar   修改agent配置 1 2 3 4 5 6 7  cd /opt/software/skywalking/apache-skywalking-apm-bin mkdir /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot cp /opt/software/skywalking/apache-skywalking-apm-bin/agent/* /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot # 修改应用名称 vim /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/config/agent.config   启动应用 1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking监控mysql(四)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</guid>
      <description>  准备以mysql为数据库的springboot应用
  上传jar到指定目录
  使用java-agent启动springboot应用
1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar      可以在ui服务上看到，从用户请求到mysql的过程，还可以看到执行了什么sql,方便查找问题
  </description>
    </item>
    
    <item>
      <title>SkyWalking配合tomcat使用(二)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</guid>
      <description>上传tomcat至服务器 1 2  #下载tomcat8 https://tomcat.apache.org/download-80.cgi   修改tomcat配置 1 2 3 4  # 端口修改8081 vim /opt/software/apache-tomcat-8.5.68/conf/server.xml # 修改tomcat启动方式 在加catalina.sh最上面！ CATALINA_OPTS=&amp;#34;$CATALINA_OPTS-javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar&amp;#34;; export CATALINA_OPTS   上传springMvc的war包 1  cd /opt/software/apache-tomcat-8.5.68/webapps/   启动tomcat 1  ./opt/software/apache-tomcat-8.5.68/bin/startup.sh    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking配置覆盖(五)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</guid>
      <description>之前使用agent，我们需要每起一个应用都cp一份agent文件，因为应用名称实在agen.config中配置的，为了避免这么麻烦，可以利用配置覆盖，使用同一个agent文件达到不同配置的目的
 配置覆盖 默认情况下，SkyWalking为agent提供了agent.config配置文件。
配置覆盖意味着用户可以通过系统属性或agent选项覆盖配置文件中的配置。 title: &amp;ldquo;skywalking配置覆盖&amp;rdquo; date: 2021-07-13T16:27:57+08:00 draft: false author: &amp;ldquo;ggball&amp;rdquo; tags: [&amp;ldquo;skywalking&amp;rdquo;] categories: [&amp;ldquo;java&amp;rdquo;] description: &amp;ldquo;skywalking配置覆盖&amp;rdquo; 系统属性 使用 skywalking. + 配置文件中的配置名 作为系统属性的配置名来覆盖配置文件中的值。
  为什么需要这个前缀？
因为agent系统属性是和目标应用共享的，加前缀是为了避免冲突。
  例子
通过下面的系统属性覆盖agent.application_code。
1  -Dskywalking.agent.application_code=31200   实际案例
1 2 3 4 5 6  -Dskywalking.agent.service_name=skywalking_mysql #实际语句 java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar \ -Dskywalking.agent.service_name=skywalking_mysql \ /opt/jar/mysql-boot.jar     java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar
-Dskywalking.agent.service_name=transaction1
/opt/jar/transaction1.jar
&amp;ndash;PROFILE=test
&amp;ndash;server.port=8002 &amp;amp;
java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar</description>
    </item>
    
  </channel>
</rss>
