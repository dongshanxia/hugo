<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockers on </title>
    <link>http://127.0.0.1:1313/hugo/docker/</link>
    <description>Recent content in Dockers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Jan 2022 10:51:25 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s</title>
      <link>http://127.0.0.1:1313/hugo/docker/k8s/</link>
      <pubDate>Thu, 20 Jan 2022 10:51:25 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/k8s/</guid>
      <description>获取节点和服务版本信息 kubectl get nodes
获取节点和服务版本信息，并查看附加信息 kubectl get nodes -o wide
获取pod信息，默认是default名称空间 kubectl get pod
获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】 kubectl get pod -o wide
获取指定名称空间的pod kubectl get pod -n kube-system
获取指定名称空间中的指定pod kubectl get pod -n kube-system podName
获取所有名称空间的pod kubectl get pod -A
查看pod的详细信息，以yaml格式或json格式显示 kubectl get pods -o yaml kubectl get pods -o json
查看pod的标签信息 kubectl get pod -A &amp;ndash;show-labels
根据Selector（label query）来查询pod kubectl get pod -A &amp;ndash;selector=&amp;ldquo;k8s-app=kube-dns&amp;rdquo;
查看运行pod的环境变量 kubectl exec podName env
查看指定pod的日志 kubectl logs -f &amp;ndash;tail 500 -n kube-system kube-apiserver-k8s-master</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker-compose/</link>
      <pubDate>Tue, 04 Jan 2022 20:14:01 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker-compose/</guid>
      <description>docker-compose 的相关说明 docker-compose.yml 文件说明 # common.env 文件里面格式为 RACK_ENV=development # arg 和 env_file 和 environment 联系：因为都是设置变量的 arg 设置dockerfile的变量 env_file 设置docker容器的运行环境变量的 environment 设置docker镜像和容器的环境变量的，会覆盖 dockerfile 里面 env 设置的环境变量 # 在工作目录下创建 docker-compose.yml 文件，编辑以下内容 version: &amp;#34;3&amp;#34; # version 版本 services: # 定义服务，这里定义 test-service服务 test-service: #指定这个服务的名字 image: test-service-image # 镜像的名字 container_name: test-service-container # 容器的名字 hostname: 192.168.1.65 restart: always privileged: true working_dir: /root env_file: # 专门存放变量的文件。如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。如果有变量名称与 environment 指令冲突，则以后者为准 - ./common.env - .</description>
    </item>
    
    <item>
      <title>Mysql安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/mysql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 04 Jan 2022 20:07:31 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/mysql%E5%AE%89%E8%A3%85/</guid>
      <description>docker-mysql安装部署文档 [TOC]
一、前置条件 1.1 前置环境  docker 环境 docker ps 必须可以用 docker-compose -version 必须可以用  1.2 安装包名 [docker-mysql_5.7.24_2020_8_27.tar]
1.3 升级服务器 ​	需要搭建 maven的机器
1.4 升级操作用户 ​	用户名 拥有docker权限的用户 （cjpt,alarm 都可以）
1.5 安装路径 ​	路径：/home/cjpt/temp/
1.6 升级涉及到的服务    服务名称 升级前版本号 升级后版本号     mysql  2.16.6    1.7 升级功能说明 docker-nexus 镜像
二、安装步骤 2.1 安装升级包 #### 进入安装目录 cd /home/cjpt/temp/ #### 进入安装目录 docker load &amp;lt; mysql.tar 2.2 升级步骤 version: &amp;#34;3&amp;#34; services: mysql: image: docker-registry:5000/mysql:3.</description>
    </item>
    
    <item>
      <title>Docker命令</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 04 Jan 2022 20:04:32 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker%E5%91%BD%E4%BB%A4/</guid>
      <description>docker说明 搜索镜像  docker search 镜像名 https://hub.docker.com/  拉取镜像  docker pull NAME[:TAG] 可以-q 去除详细输出  保存镜像  docker save -o localName NAME[:TAG] docker save -o cjpt-service-alarm-user.tar cjpt-service-alarm-user:latest （） 上面的解释： 将镜像中的 镜像名为 cjpt-service-alarm-user 标签为 latest 保存到 同一目录 名为cjpt-service-alarm-user.tar  查看本地镜像  docker images   加载镜像  docker load &amp;lt; 压缩包名 docker load &amp;ndash;input 压缩包名 docker load &amp;lt; cjptjava8.tar 加载cjptjava8.tar的镜像  给镜像修改名称   docker tag imageId REPOSITORY:TAG   imageId: 镜像的id REPOSITORY：本地镜像名称 TAG: 标记</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>http://127.0.0.1:1313/hugo/docker/dockerfile/</link>
      <pubDate>Tue, 04 Jan 2022 19:23:09 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/dockerfile/</guid>
      <description>dockerfile [toc]
1.例子 # 选择一个已有的os镜像作为基础 FROM docker.io/centos:7.4.1708 # 镜像的作者 MAINTAINER xuchenbing #配置阿里的yum源,删除系统自带的yum源 RUN rm -rf /etc/yum.repos.d/CentOS7-Base-163.repo #将阿里的yum文件复制进去 COPY CentOS7-Base-163.repo /etc/yum.repos.d/CentOS7-Base-163.repo #设置亚洲时区 RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;amp;&amp;amp; echo &#39;Asia/Shanghai&#39; &amp;gt;/etc/timezone #安装openssh-server RUN yum install -y openssh-server \ #修改配置 &amp;amp;&amp;amp; sed -i &#39;s/UsePAM yes/UsePAM no/g&#39; /etc/ssh/sshd_config \ #安装openssh-clients &amp;amp;&amp;amp; yum install -y openssh-clients \ #修改root密码 &amp;amp;&amp;amp; echo &amp;quot;root&amp;quot; | passwd --stdin root \ #生成密钥 &amp;amp;&amp;amp; ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key \ &amp;amp;&amp;amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \ &amp;amp;&amp;amp; ssh-keygen -t ecdsa -b 256 -f /etc/ssh/ssh_host_ecdsa_key \ &amp;amp;&amp;amp; ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \ #清除yum安装缓存 &amp;amp;&amp;amp; yum clean all #设置支持中文字符 RUN locale \ &amp;amp;&amp;amp; localedef -i zh_CN -c -f UTF-8 zh_CN.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>http://127.0.0.1:1313/hugo/docker/config/</link>
      <pubDate>Tue, 04 Jan 2022 17:12:47 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/config/</guid>
      <description>daemon.json { &amp;#34;api-cors-header&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;authorization-plugins&amp;#34;:[], &amp;#34;bip&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;bridge&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cgroup-parent&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cluster-store&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cluster-store-opts&amp;#34;:{}, &amp;#34;cluster-advertise&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;debug&amp;#34;: true, #启用debug的模式，启用后，可以看到很多的启动信息。默认false &amp;#34;default-gateway&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;default-gateway-v6&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;default-runtime&amp;#34;:&amp;#34;runc&amp;#34;, &amp;#34;default-ulimits&amp;#34;:{}, &amp;#34;disable-legacy-registry&amp;#34;:false, &amp;#34;dns&amp;#34;: [&amp;#34;192.168.1.1&amp;#34;], # 设定容器DNS的地址，在容器的 /etc/resolv.conf文件中可查看。 &amp;#34;dns-opts&amp;#34;: [], # 容器 /etc/resolv.conf 文件，其他设置 &amp;#34;dns-search&amp;#34;: [], # 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的 主机时，DNS不仅搜索host，还会搜索host.example.com 。注意：如果不设置， Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。 &amp;#34;exec-opts&amp;#34;: [], &amp;#34;exec-root&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;fixed-cidr&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;fixed-cidr-v6&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;graph&amp;#34;:&amp;#34;/var/lib/docker&amp;#34;,＃已废弃，使用data-root代替,这个主要看docker的版本 &amp;#34;data-root&amp;#34;:&amp;#34;/var/lib/docker&amp;#34;,＃Docker运行时使用的根路径,根路径下的内容稍后介绍，默认/var/lib/docker &amp;#34;group&amp;#34;: &amp;#34;&amp;#34;,#Unix套接字的属组,仅指/var/run/docker.sock &amp;#34;hosts&amp;#34;: [], #设置容器hosts &amp;#34;icc&amp;#34;: false, &amp;#34;insecure-registries&amp;#34;: [], #配置docker的私库地址 &amp;#34;ip&amp;#34;:&amp;#34;0.0.0.0&amp;#34;, &amp;#34;iptables&amp;#34;: false, &amp;#34;ipv6&amp;#34;: false, &amp;#34;ip-forward&amp;#34;: false, #默认true, 启用 net.</description>
    </item>
    
    <item>
      <title>Docker清理</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</link>
      <pubDate>Thu, 11 Nov 2021 17:25:04 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</guid>
      <description>列出无用的卷 docker volume ls -qf dangling=true 清理无用的卷 docker volume rm $(docker volume ls -qf dangling=true) 清除推出的容器 docker rm $(docker ps -a | grep &amp;#34;Exited&amp;#34; | awk &amp;#39;{print $1}&amp;#39;) 清除none的 镜像 docker rmi $(docker images | grep &amp;#34;&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#39;{print $3}&amp;#39;) </description>
    </item>
    
    <item>
      <title>Oracle安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 12 Oct 2021 10:35:56 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</guid>
      <description>oracle的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   docker load &amp;lt; oracle_1.tar   查看是否倒入成功   docker images | grep oracle   启动命令   docker container run --restart=always --name oracle -p 31521:1521 -e DBCA_TOTAL_MEMORY=1024 -v /docker/software/oracle/ora:/u01/app/oracle/ -d registory.dongshanxia.top:35000/docker/oracle:1.0   docker-compose 文件
  version: &amp;quot;3&amp;quot; services: oracle: image: registory.dongshanxia.top:35000/docker/oracle:1.0 container_name: oracle hostname: 10.168.2.82 restart: always privileged: true working_dir: /root environment: - profile=&amp;quot;&amp;quot; volumes: - /docker/software/oracle:/u01/app/oracle expose: - &amp;quot;22&amp;quot; - &amp;quot;1521&amp;quot; ports: - &amp;quot;31521:1521&amp;quot; network_mode: &amp;quot;bridge&amp;quot;   数据库配置说明  普通用户  hostname: localhost port: 1521 sid: xe username: system password: oracle  最高用户  hostname: localhost port: 1521 sid: xe username: sys as sysdba password: oracle </description>
    </item>
    
    <item>
      <title>Mssql安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 12 Oct 2021 10:35:46 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</guid>
      <description>mssql的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   docker load &amp;lt; mssql_1.tar   查看是否倒入成功   docker images | grep mssql     启动命令   docker container run --restart=always --name mssql -p 31433:31433 -v /docker/software/MSSQL/data:/var/opt/mssql/data/ -v /docker/software/MSSQL/log:/var/opt/mssql/log/ -v /docker/software/MSSQL/config:/var/opt/mssql/config -d registory.dongshanxia.top:35000/docker/MSSQL:1.0   docker-compose 文件
  version: &amp;quot;3&amp;quot; services: MSSQL: image: registory.dongshanxia.top:35000/docker/MSSQL:1.0 container_name: MSSQL hostname: 10.168.2.82 restart: always privileged: true working_dir: /root environment: - profile=&amp;quot;&amp;quot; volumes: - /docker/software/MSSQL/data:/var/opt/mssql/data - /docker/software/MSSQL/log:/var/opt/mssql/log - /docker/software/MSSQL/config:/var/opt/mssql/config expose: - &amp;quot;31433&amp;quot; ports: - &amp;quot;31433:31433&amp;quot; network_mode: &amp;quot;bridge&amp;quot;   数据库配置说明  帐号密码  帐号: SA 密码:top123-DONGSHANXIA   帐号密码  帐号:root 密码:root123-DONGSHANXIA    </description>
    </item>
    
  </channel>
</rss>
