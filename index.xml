<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://127.0.0.1:1313/hugo/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Dec 2021 14:34:17 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog</title>
      <link>http://127.0.0.1:1313/hugo/about/blog/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/blog/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14  flowchart TB A[git-client]&amp;lt;--&amp;gt;B[git-server-gitea] B--&amp;gt;C[drone] C--&amp;gt;D[github] C--&amp;gt;vercel D--&amp;gt;netlify C--go-OS-Client--&amp;gt;E[openSearch] F[blogweb] &amp;lt;----&amp;gt; G[go-blogserver] E&amp;lt;--正在实现--&amp;gt;G   </description>
    </item>
    
    <item>
      <title>Crontab</title>
      <link>http://127.0.0.1:1313/hugo/linux/crontab/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/crontab/</guid>
      <description>crontab  查看 crontab -l 编辑  crontab -e   如何配置  1 2 3 4 5 6 7 8  * * * * * - - - - - | | | | | | | | | +----- 星期中星期几 (0 - 6) (星期天 为0) | | | +---------- 月份 (1 - 12) | | +--------------- 一个月中的第几天 (1 - 31) | +-------------------- 小时 (0 - 23) +------------------------- 分钟 (0 - 59)     例子</description>
    </item>
    
    <item>
      <title>Date命令</title>
      <link>http://127.0.0.1:1313/hugo/linux/date%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/date%E5%91%BD%E4%BB%A4/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/usr/bin/env bash  year=`date +&amp;#34;%Y&amp;#34;` month=`date +&amp;#34;%-m&amp;#34;` day=`date +&amp;#34;%-d&amp;#34;` hour=`date +&amp;#34;%-H&amp;#34;` minute=`date +&amp;#34;%-M&amp;#34;` second=`date +&amp;#34;%-S&amp;#34;` week=`date +&amp;#34;%-w&amp;#34;` numWeek=`date +&amp;#34;%-W&amp;#34;` echo &amp;#34;year: &amp;#34;${year} echo &amp;#34;month: &amp;#34;${month} echo &amp;#34;day: &amp;#34;${day} echo &amp;#34;hour: &amp;#34;${hour} echo &amp;#34;minute: &amp;#34;${minute} echo &amp;#34;second: &amp;#34;${second} echo &amp;#34;week: &amp;#34;${week} echo &amp;#34;numWeek:&amp;#34;${numWeek} val=`expr ${numWeek} % 4` echo ${val}   </description>
    </item>
    
    <item>
      <title>Docker清理</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</guid>
      <description>列出无用的卷 1  docker volume ls -qf dangling=true   清理无用的卷 1  docker volume rm $(docker volume ls -qf dangling=true)   清除推出的容器 1  docker rm $(docker ps -a | grep &amp;#34;Exited&amp;#34; | awk &amp;#39;{print $1}&amp;#39;)   清除none的 镜像 1  docker rmi $(docker images | grep &amp;#34;&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#39;{print $3}&amp;#39;)   </description>
    </item>
    
    <item>
      <title>Dongshanxia</title>
      <link>http://127.0.0.1:1313/hugo/about/dongshanxia/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dongshanxia/</guid>
      <description>个人介绍  出生: 1995.04 住址: 杭州市滨江区 电话: 13395753926 邮箱: 984801940@qq.com  教育背景    时间 学校 专业     2014.09-2018.07 洛阳理工学院 计算机科学与技术    掌握技能  严格遵守Java开发规范，有良好的面向对象的业务分析能力，代码书写简洁，力求完美开发。 了解jvm 以及 几种常见的jvm的垃圾回收机制 熟练运用Spring和ioc的加载过程 熟练掌握MySql，了解mysql的索引 精通使用kafka，kafka调优，spark,spark调优等大数据技术。 熟练使用SpringMVC，Springboot，Spring Cloud等Spring全家桶系列框架。 熟练使用 PostgreSQL, Redis等数据库和mybatis，mybatisPlus，jdbc等持久层开发技术. 熟练使用fastDFS，Cloudreve等文件存储服务技术。 熟练使用zookeeper , hadoop , hbase , Elasticsearch，Kerboros等技术工具进行开发。 熟练使用maven项目版本，打包和依赖管理工具 熟练使用linux操作系统，网络配置，shell脚本 (grep , sed , awk） 熟练使用docker镜像的分层，docker-compose和docker命令简单使用 熟练使用gitlab和gitlab_ci简单使用 熟悉k8s（正在学习） 熟练使用netty, netty-websock 熟悉Nginx等web服务器。 熟练使用idea，Eclipse开发工具和Git，SVN版本控制工具。 了解go,用go语言写leetcode 会使用异地组网 (蒲公英,zerotier) 博客地址 (见其它补充)  工作经历 杭州合韬科技有限公司  职位: java开发工程师 时间: 2018-03 ~~ 2021-5 职责:  负责公司项目数据接入，分析，入库； Spark , Kafka , Zookeeper集群的维护； Java依赖第三方包的版本进行管理；    浙江火眼金睛数据科技有限公司  职位: 大数据开发工程师 时间: 2021-5 ~~ 2021-8 职责:  负责数据接入和分析   实际事情  安装服务器 维护服务器    项目经历 公安预警系统(西湖指挥中心 六翮凌风)  项目时间:  2018年7月-2020年9月   项目描述:  通过netty,mq,定时任务同步数据库，汇聚到kafka里面，在通过spark 进行规则预警，实时预警推向kafka,数据统计，基础数据入库，redis数据相关性进行分发。(公安具体业务性属于保密信息无法展开)   项目结构  接入层：netty ,ftp,kafka； 分析层：spark； 数据层：MySQL,hbase, PostgreSQL,redis,hadoop。 持久层：MyBatis,jdbc, hbaseUtil； 业务层：Spring 控制层：SpringMVC、Spring SecurityOauth2； 展示层：vue,jsp   负责模块:  前端接入：netty接收tcp和udp的数据，转发ftp数据推向kafka，转发mq数据推向kafka； s三台Kafa集群：kafka topic的基本维护，kafka集群的搭建与基本维护； 15台spark集群：spark程序 分析3W/s左右数据量 预警统计: 对设备的状态及数据量维护。    数据资源中心系统（类似百度网盘的功能)  项目时间:  2020年9月-2021年5月   项目描述:  每个系统都是有一个文件存储和管理的地方，为了解决文件存储 采用了hdfs的文件存储方式，搜索采用了Elasticsearch 进行搜索.</description>
    </item>
    
    <item>
      <title>Es Ik</title>
      <link>http://127.0.0.1:1313/hugo/es/es-ik/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/es-ik/</guid>
      <description>es-server-ik 1.前提  有一个完美运行的 es集群 es的home 假设为 /eshome eshome=/home/top/es/elasticsearch-7.15.2(隔壁那份es安装文档的对应目录) 每一台es节点都需要执行哦  2.上传ik安装包  把ik 安装包放在可供 es下载的地址 这边直接node60机器的nginx地址 可以直接用github地址的 地址  3.安装ik 1  /$eshome/elasticsearch-plugin install http://10.168.2.60:35000/elasticsearch-analysis-ik-7.15.2.zip   重启ES  stop  1  ps -ef | grep elasticsearch |grep UTF-8| grep -v grep | awk &amp;#39;{print $2}&amp;#39;|xargs kill -9    start  1  /$eshome/bin/elasticsearch -d   </description>
    </item>
    
    <item>
      <title>Gitlab</title>
      <link>http://127.0.0.1:1313/hugo/git/gitlab/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/git/gitlab/</guid>
      <description>gitlab docker-compose  配置文件  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 在工作目录下创建 docker-compose.yml 文件，编辑以下内容version:&amp;#34;3&amp;#34;services:gitlab:image:&amp;#39;gitlab/gitlab-ce:latest&amp;#39;restart:alwayscontainer_name:gitlabports:- &amp;#39;80:80&amp;#39;volumes:- &amp;#39;/docker/software/gitlab/config:/etc/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/logs:/var/log/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/data:/var/opt/gitlab&amp;#39;environment:TZ:&amp;#39;Asia/Shanghai&amp;#39;GITLAB_OMNIBUS_CONFIG:|external_url &amp;#39;http://127.0.0.1:80&amp;#39;# Add any other gitlab.rb configuration here, each on its own linegitlab_rails[&amp;#39;gitlab_ssh_host&amp;#39;] = &amp;#39;127.0.0.1&amp;#39;# gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 26013   初始密码  1 2  /docker/software/gitlab/config/initial_root_password 查找(docker 挂载出来的路径)   </description>
    </item>
    
    <item>
      <title>Go_install</title>
      <link>http://127.0.0.1:1313/hugo/go/go_install/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/go/go_install/</guid>
      <description>go 安装 1.下载地址  https://golang.google.cn/dl/  2.linux安装 1  tar -C /usr/local -xzf go.*.linux-amd64.tar.gz   3. 配置环境变量 1 2  export GO_HOME=/usr/local/go export PATH=$GO_HOME/bin:$PATH   4.生效环境变量 1  source 环境变量文件   </description>
    </item>
    
    <item>
      <title>Hive</title>
      <link>http://127.0.0.1:1313/hugo/db/hive/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/hive/</guid>
      <description>常见hive语句 1、创建hive库 1  createdatabasehive_oracle;  2、选择库 1  usehive_oracle  3、创建数据库 1 2 3 4 5 6 7  CREATETABLE`hive_oracle.xcb_oracle_hive_end_dt`(`xcb_id`bigint,`xcb_number`int,`xcb_timestamp`timestamp,`xcb_varchar2`string)PARTITIONEDBY(`ds`string)  4、简单查询 1  select*fromxcb_oracle_hive_base_dt;（原来有数据的一张表）  5、时间函数  to_date  1  selectxcb_id,to_date(xcb_timestamp)fromxcb_oracle_hive_base_dt;   from_unixtime (这个不行) &amp;mdash;- select from_unixtime(1323308943,’yyyyMMdd’);  1  selectxcb_id,from_unixtime(xcb_timestamp,&amp;#39;yyyyMMdd&amp;#39;)fromxcb_oracle_hive_base_dt;    unix_timestamp
1  selectxcb_id,unix_timestamp(xcb_timestamp,&amp;#39;yyyyMMdd&amp;#39;)fromxcb_oracle_hive_base_dt;    year 返回日期中的年
1  selectxcb_id,year(xcb_timestamp)fromxcb_oracle_hive_base_dt;    month 返回日期中的月份
1  selectxcb_id,month(xcb_timestamp)fromxcb_oracle_hive_base_dt;    day：返回日期中的天</description>
    </item>
    
    <item>
      <title>Httpd</title>
      <link>http://127.0.0.1:1313/hugo/linux/httpd/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/httpd/</guid>
      <description>httpd访问网络配置httpd_can_network_connect 检查网络访问的配置
getsebool -a | grep httpd_can_network_connect
如结果如下
httpd_can_network_connect &amp;ndash;&amp;gt; off
则执行如下命令打开：
SELinux命令，临时配置，重启后失效 setsebool httpd_can_network_connect=1
写入配置文件的命令，重启后保留
setsebool -P httpd_can_network_connect 1</description>
    </item>
    
    <item>
      <title>java日志体系</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</guid>
      <description>java日志体系 常用日志框架
 Log4j：Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j 2：Apache Log4j 2是Apache开发的一款Log4j的升级产品。 Commons Logging：Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging。Apache推出了JCL（Jakarta Commons Logging），它只是定义了一套日志接口（其内部也提供一个Simple Log的简单实现），JCL也是一套接口规范，支持运行时动态加载日志组件的实现。也就是说，在应用程序代码中，只需调用Commons Logging的接口，底层实现可以是Log4j，也可以是JUL SLF4J：全称为Simple Logging Facade for Java，类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。 Logback：是一套日志组件的实现，属于SLF4J阵营。 JUL：全称是Java Util Logging，是JDK1.4以后提供的日志实现。  mybatis日志体系 日志接口 定义了打印日志的级别
日志实现 配置日志框架的三种方式 1. 手动指定日志框架 1.先确定日志的Constructor对象
2.再利用Constructor对象和类名创建日志对象
3.打印日志的功能交给其他对象
2. 自动配置日志框架 如果不指定日志框架，mybatis也会尝试去找日志的实现
LogFactory中有静态代码块，会率先执行里面的代码，顺序执行（MyBatis查找日志框架的顺序为SLF4J→JCL→Log4j2→Log4j→JUL→No Logging），注意这里的run不是线程的run的概念，单纯只是匿名函数，传入Runnable对象，会执行它的run方法而已
比如会先执行第一个useSlf4jLogging 方法，如果找不到Slf4j对应的jar包，会抛出异常，但是不做任何处理，则继续执行下一个useCommonsLogging方法，如果找到了对应的jar包，会创建
Constructor对象在LogFactory对象里，然后继续执行tryImplementation、useLog4JLogging方法，每次都会判断Constructor对象为空，如果不为空则不会执行Runnable对象的run方法，从而实现自动确定日志框架。
3. 配置文件指定日志框架 项目启动时，会去读取mybatis配置文件，将logImpl的值set到configuration对象，如果有配置日志实现，configuration对象会在调用setLogImpl，来创建指定日志的Constructor对象
总结 三种配置日志框架的方法，了解怎么把日志实现交给mybatis，mybatis如何设置日志框架的， 日志框架设计的很巧妙，接口和实现完全分开来，用户可以随意搭配实现。</description>
    </item>
    
    <item>
      <title>Leak</title>
      <link>http://127.0.0.1:1313/hugo/java/leak/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/leak/</guid>
      <description>漏洞之 Apache log4j2   版本: 2.0到 2.14.1
  修改成
  1 2 3 4 5 6  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.15.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   </description>
    </item>
    
    <item>
      <title>LetusEncrypt</title>
      <link>http://127.0.0.1:1313/hugo/network/letusencrypt/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/network/letusencrypt/</guid>
      <description>1.http与https  简单的说:  https = http+ssl(安全访问) https 比较安全    2.Let&amp;rsquo;s Encrypt  想要 https 就是购买证书 在 Let&amp;rsquo;s Encrypt可以免费申请证书 官网  3.Certbot  Let&amp;rsquo;s Encrypt 官网提供的服务端的API 但是 作为使用者 还是别去研究API 官网有很多语言的客户端的 (java,go) 官网要推荐的客户端 cerbot  4.开启 Certbot 之旅  好像有多种模式 ,多种插件 (多条岔路容易错误) 无插件 certbot 完成对SSL证书的 申请和续约  4.1 准备环境  系统 debian (debian:buster-slim) 需要能连接互联网 会用apt命令  4.2 安装certbot  更新 apt 源索引 apt update 安装 certbot  apt install certbot    4.</description>
    </item>
    
    <item>
      <title>linux好玩的</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</guid>
      <description>linux 好玩 压缩  tar -zcvf soft.tar.gz /soft/ /dir /dir  解压  tar -zxvf /soft.tar.gz -C /  查看版本  cat /etc/issue 查看版本  shell脚本的运行方式 1.set -x 或set xtrace
会显示+以及脚本中的内容(执行的部分，没执行的不显示)
set -xv（脚本中所有的内容都显示，包括没执行的部分）
查看端口号 netstat -lnp|grep 8080
查找某个文件 1 2  ## 寻找某个文件 find . -name &amp;#34;*.tar&amp;#34;   软连接 1  ln -s /data/mysql3306/config/my.cnf /etc/mysql/my.cnf   查询服务详情 1  journalctl -u 服务名   5</description>
    </item>
    
    <item>
      <title>Mssql</title>
      <link>http://127.0.0.1:1313/hugo/db/mssql/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mssql/</guid>
      <description>中文问题相关 ALTER DATABASE test COLLATE Chinese_PRC_CI_AS</description>
    </item>
    
    <item>
      <title>Mssql安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</guid>
      <description>mssql的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   1  docker load &amp;lt; mssql_1.tar     查看是否倒入成功   1  docker images | grep mssql       启动命令   1 2 3 4 5  docker container run --restart=always --name mssql -p 31433:31433 -v /docker/software/MSSQL/data:/var/opt/mssql/data/ -v /docker/software/MSSQL/log:/var/opt/mssql/log/ -v /docker/software/MSSQL/config:/var/opt/mssql/config -d registory.dongshanxia.top:35000/docker/MSSQL:1.0     docker-compose 文件
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: &amp;#34;3&amp;#34; services: MSSQL: image: registory.</description>
    </item>
    
    <item>
      <title>mybatis拦截器执行过程</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</guid>
      <description>m[toc]
mybatis的拦截器本人平时也很少用到，没了解之前，也只是知道运用到了动态代理用来增强方法的功能，但是不了解其中的原理。为了更好的使用mybatis，这次，我记录下我所了解的mybatis的原理，本文不一定完全正确，可能有理解不到位的地方。
1、使用mybatis的拦截器 像平常使用mybatis框架时，如果哪句sql报错了，我们可以通过控制台或日志打印的sql去查看sql的问题，但是如果sql有太多的参数，其实是很不方便的，自己还得手动去把一个一个参数给设置上，有些浪费时间，这时候就可以利用mybatis的拦截器去帮我们把参数给设置上。
 配置步骤
 1.创建拦截器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  @Intercepts({ @Signature(type = StatementHandler.class, method = &amp;#34;query&amp;#34;, args = {Statement.class, ResultHandler.class}), @Signature(type = StatementHandler.class, method = &amp;#34;update&amp;#34;, args = {Statement.class}), @Signature(type = StatementHandler.class, method = &amp;#34;batch&amp;#34;, args = {Statement.class}) }) public class SlowSqlInterceptor implements Interceptor { @Override public Object intercept(Invocation invocation) throws InvocationTargetException, IllegalAccessException { // 主要逻辑 拼接参数到sql，并打印  } @Override public Object plugin(Object target) { // 创建代理对象  return Plugin.</description>
    </item>
    
    <item>
      <title>mybatis核心组件</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  sequenceDiagram participant SqlSession participant Excutor participant StatementHandler participant parameterHandler participant ResultSetHandler participant TypeHandler participant ResultSet participant JDBC SqlSession-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;StatementHandler: StatementHandler--&amp;gt;&amp;gt;parameterHandler: StatementHandler--&amp;gt;&amp;gt;JDBC: parameterHandler--&amp;gt;&amp;gt;TypeHandler: parameterHandler-&amp;gt;&amp;gt;JDBC: JDBC-&amp;gt;&amp;gt;ResultSet: ResultSet--&amp;gt;&amp;gt;TypeHandler: ResultSet--&amp;gt;&amp;gt;ResultSetHandler: TypeHandler--&amp;gt;&amp;gt;ResultSetHandler: ResultSetHandler-&amp;gt;&amp;gt;StatementHandler: StatementHandler-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;SqlSession: Note left of SqlSession: asa   1 2 3 4  flowchart TD subgraph configuration mappedStatement1 --&amp;gt; mappedStatement2 end   configuration:</description>
    </item>
    
    <item>
      <title>mybati缓存了解</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</guid>
      <description>mybatis的缓存 首先来看下mybatis对缓存的规范，规范嘛就是定义的接口啦。
缓存接口 ​	Cache接口 定义了缓存的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  public interface Cache { /**获取缓存的id * @return The identifier of this cache */ String getId(); /**添加缓存 * @param key Can be any object but usually it is a {@link CacheKey} * @param value The result of a select.</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>http://127.0.0.1:1313/hugo/db/oracle/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/oracle/</guid>
      <description>时间字段分析  timestamp 精确到秒后面6位 date 精确到秒  </description>
    </item>
    
    <item>
      <title>Oracle安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</guid>
      <description>oracle的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   1  docker load &amp;lt; oracle_1.tar     查看是否倒入成功   1  docker images | grep oracle     启动命令   1  docker container run --restart=always --name oracle -p 31521:1521 -e DBCA_TOTAL_MEMORY=1024 -v /docker/software/oracle/ora:/u01/app/oracle/ -d registory.dongshanxia.top:35000/docker/oracle:1.0     docker-compose 文件
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  version: &amp;#34;3&amp;#34; services: oracle: image: registory.</description>
    </item>
    
    <item>
      <title>Parted</title>
      <link>http://127.0.0.1:1313/hugo/linux/parted/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/parted/</guid>
      <description>parted 规划分区   进入某个磁盘的分区
 parted /dev/sdb    新建标签类型
  mklabel
  1 2 3 4  (parted) mklabel 新的磁盘标签类型？ gpt 警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue? 是/Yes/否/No? yes       新建分区
  mkpart
  1 2 3 4 5  (parted) mkpart 分区名称？ []?</description>
    </item>
    
    <item>
      <title>Picgo</title>
      <link>http://127.0.0.1:1313/hugo/other/picgo/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/other/picgo/</guid>
      <description>picgo  地址 : /home/zhu/software/node/node-v14.15.0-linux-x64/bin 文件内容  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/usr/bin/env /home/zhu/software/node/node-v14.15.0-linux-x64/bin/node const path = require(&amp;#39;path&amp;#39;) const minimist = require(&amp;#39;minimist&amp;#39;) const argv = minimist(process.argv.slice(2)) let configPath = argv.c || argv.config || &amp;#39;&amp;#39; if (configPath !== true &amp;amp;&amp;amp; configPath !== &amp;#39;&amp;#39;) { configPath = path.resolve(configPath) } else { configPath = &amp;#39;&amp;#39; } const PicGo = require(&amp;#39;.</description>
    </item>
    
    <item>
      <title>Pve</title>
      <link>http://127.0.0.1:1313/hugo/linux/pve/pve/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/pve/pve/</guid>
      <description>查看集群资源状况  1  pvesh get /cluster/resources   取得虚拟机当前状态 1 2 3  pvesh get /nodes/&amp;lt;节点id&amp;gt;/qemu/&amp;lt;虚拟机id&amp;gt;/status/current pvesh get /nodes/pve/qemu/100/status/current   关闭虚拟机 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  pvesh create /nodes/&amp;lt;节点id&amp;gt;/qemu/&amp;lt;虚拟机id&amp;gt;/status/stop pvesh create /nodes/pve/qemu/990/status/start pvesh create /nodes/pve/qemu/176/status/start pvesh create /nodes/pve/qemu/255/status/start pvesh create /nodes/pve/qemu/201/status/start pvesh create /nodes/pve/qemu/100/status/start pvesh create /nodes/pve/qemu/399/status/start pvesh create /nodes/pve/qemu/103/status/start pvesh create /nodes/pve/qemu/101/status/start pvesh create /nodes/pve/qemu/174/status/start pvesh create /nodes/pve/qemu/104/status/start pvesh create /nodes/pve/qemu/777/status/start pvesh create /nodes/pve/qemu/102/status/start pvesh create /nodes/pve/qemu/173/status/start   挂载img文件 1  qm importdisk 990 /var/lib/vz/template/iso/openwrt-gdq-v9-1_2021_-x86-64-generic-squashfs-uefi.</description>
    </item>
    
    <item>
      <title>Pve崩溃</title>
      <link>http://127.0.0.1:1313/hugo/linux/pve/pve%E5%B4%A9%E6%BA%83/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/pve/pve%E5%B4%A9%E6%BA%83/</guid>
      <description>pve 故障 1.pve 集群崩溃  cluster not ready - no quorum? (500)  1、隔离节点上停止 pve-cluster 服务 1 2  systemctl stop pve-cluster.service systemctl stop corosync.service   2、上一步执行成功后，执行将待隔离节点的集群文件系统设置为本地模式的命令 1  pmxcfs -l   3、上一步执行成功后，执行删除 corosync 配置文件的命令 1 2  rm /etc/pve/corosync.conf rm -rf /etc/corosync/*   4、前3步都执行成功后，执行重新启动集群文件系统服务的命令 1 2  killall pmxcfs systemctl start pve-cluster.service   5、删除故障节点node文件 1 2 3  cd /etc/pve/nodes ls rm -rf /etc/pve/nodes/pvepc #改成故障节点对应路径   </description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>http://127.0.0.1:1313/hugo/about/readme/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/readme/</guid>
      <description>环境准备  需要有hugo的环境  下载项目 hugo地址
创建一个属于某一个的类的文件  hugo new linux/aa.md  最好在项目的根目录执行 linux 相当于文件夹    浏览地址  xcb-github xcb-gitee xcb-netlify-github xcb-vercek-github xcb-home 如果需要自动部署到自己平台 就直接CICD  测试opensearch </description>
    </item>
    
    <item>
      <title>SkyWalking搭建(一)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>基于 docker 部署 skywalking 并实现 SpringBoot 全链路监控 [toc]
一、安装环境部署 下载镜像：
1 2 3  $ docker pull docker pull elasticsearch:7.10.1 $ docker pull apache/skywalking-oap-server:8.3.0-es7 $ docker pull apache/skywalking-ui:8.3.0   1.1 Docker 中安装 Elasticsearch7.6.2（方式一） 安装 Elasticsearch
注意：使用版本为 7.6.2，你可以选择其他版本 拉取镜像
1  docker pull elasticsearch:7.6.2   启动容器
1 2 3  docker run --restart=always -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; \ -e ES_JAVA_OPTS=&amp;#34;-Xms512m -Xmx512m&amp;#34; \ --name=&amp;#39;elasticsearch&amp;#39; --cpuset-cpus=&amp;#34;1&amp;#34; -m 2G -d elasticsearch:7.</description>
    </item>
    
    <item>
      <title>SkyWalking搭配springboot应用(三)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89/</guid>
      <description>上传springboot的jar包 1  cd /opt/jar   修改agent配置 1 2 3 4 5 6 7  cd /opt/software/skywalking/apache-skywalking-apm-bin mkdir /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot cp /opt/software/skywalking/apache-skywalking-apm-bin/agent/* /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot # 修改应用名称 vim /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/config/agent.config   启动应用 1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking监控mysql(四)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</guid>
      <description>  准备以mysql为数据库的springboot应用
  上传jar到指定目录
  使用java-agent启动springboot应用
1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar      可以在ui服务上看到，从用户请求到mysql的过程，还可以看到执行了什么sql,方便查找问题
  </description>
    </item>
    
    <item>
      <title>SkyWalking配合tomcat使用(二)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</guid>
      <description>上传tomcat至服务器 1 2  #下载tomcat8 https://tomcat.apache.org/download-80.cgi   修改tomcat配置 1 2 3 4  # 端口修改8081 vim /opt/software/apache-tomcat-8.5.68/conf/server.xml # 修改tomcat启动方式 在加catalina.sh最上面！ CATALINA_OPTS=&amp;#34;$CATALINA_OPTS-javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar&amp;#34;; export CATALINA_OPTS   上传springMvc的war包 1  cd /opt/software/apache-tomcat-8.5.68/webapps/   启动tomcat 1  ./opt/software/apache-tomcat-8.5.68/bin/startup.sh    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking配置覆盖(五)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</guid>
      <description>之前使用agent，我们需要每起一个应用都cp一份agent文件，因为应用名称实在agen.config中配置的，为了避免这么麻烦，可以利用配置覆盖，使用同一个agent文件达到不同配置的目的
 配置覆盖 默认情况下，SkyWalking为agent提供了agent.config配置文件。
配置覆盖意味着用户可以通过系统属性或agent选项覆盖配置文件中的配置。 title: &amp;ldquo;skywalking配置覆盖&amp;rdquo; date: 2021-07-13T16:27:57+08:00 draft: false author: &amp;ldquo;ggball&amp;rdquo; tags: [&amp;ldquo;skywalking&amp;rdquo;] categories: [&amp;ldquo;java&amp;rdquo;] description: &amp;ldquo;skywalking配置覆盖&amp;rdquo; 系统属性 使用 skywalking. + 配置文件中的配置名 作为系统属性的配置名来覆盖配置文件中的值。
  为什么需要这个前缀？
因为agent系统属性是和目标应用共享的，加前缀是为了避免冲突。
  例子
通过下面的系统属性覆盖agent.application_code。
1  -Dskywalking.agent.application_code=31200   实际案例
1 2 3 4 5 6  -Dskywalking.agent.service_name=skywalking_mysql #实际语句 java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar \ -Dskywalking.agent.service_name=skywalking_mysql \ /opt/jar/mysql-boot.jar     java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar
-Dskywalking.agent.service_name=transaction1
/opt/jar/transaction1.jar
&amp;ndash;PROFILE=test
&amp;ndash;server.port=8002 &amp;amp;
java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar</description>
    </item>
    
    <item>
      <title>SpringCloud &#43; SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题</title>
      <link>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>SpringCloud + SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题 场景: 公司以前的框架统一使用Post请求，传入参数为一个定义的公共类，类里面有个String类型的bean字段传入json字符串作为传参，emmm就想给他改成restful风格，在传入参数公共类无法改变的情况下，Get请求会传入特殊字符，导致400错误。例如：
1  localhost:10001/verify/compreport/month?data={&amp;#34;compRefOwid&amp;#34;:&amp;#34;1448487922485252098&amp;#34;, &amp;#34;yhMonth&amp;#34;:&amp;#34;2021-10&amp;#34;}   原因： Tomcat的新版本中增加了一个新特性，就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp;amp; = + $ , / ? # [ ])。
解决方案选择：  前端请求时encode特殊字段(算了，不能因为自己的原因加大前端工作量) 改用post请求(emmm没有办法的办法,看着难受就是想要改了) 改Tomcat配置文件(由于是springboot项目，内嵌了tomcat，不方便修改，好吧就是我比较菜) 在后端代码层面解决这个问题  解决方法： 其他服务：由于使用的是内嵌的tomcat，网上常见的 解决spring boot请求包含非法字符问题 The valid characters are defined in RFC 7230 and RFC 3986 错误 配置TomcatServletWebServerFactory的方式使用时会导致两个TomcatServletWebServerFactory使springboot项目报错Unable to start ServletWebServerApplicationContext due to multiple ServletWebServerFactory beans而无法启动。而使用yml配置的方式也无法生效。
1 2 3 4 5 6 7 8 9  server:tomcat:relaxed-query-chars:- &amp;#34;&amp;lt;&amp;#34;- &amp;#34;&amp;gt;&amp;#34;- &amp;#34;[&amp;#34;- &amp;#34;]&amp;#34;- &amp;#34;{&amp;#34;- &amp;#34;}&amp;#34;  随后参考了继承WebServerFactoryCustomizer的方式来修改Tomcat配置</description>
    </item>
    
    <item>
      <title>Ssh</title>
      <link>http://127.0.0.1:1313/hugo/linux/ssh/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/ssh/</guid>
      <description>生成公钥和私钥 1  ssh-keygen -t ed25519 -C &amp;#34;984801940@qq.com&amp;#34;    后面第一个设置名字 后面设置访问密码 （免密当然就是这个）  </description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://127.0.0.1:1313/hugo/test/test/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/test/test/</guid>
      <description>test nuisusd fjidfndfndjsfjidosfjdsio</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>http://127.0.0.1:1313/hugo/linux/deepin/vim/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/deepin/vim/</guid>
      <description>deepin-vim 针对用户  下载需要的包 到 家目录  1  wget --no-check-certificate https://raw.githubusercontent.com/vim/vim/master/runtime/vimrc_example.vim -O ~/.vimrc   针对全局用户  找到vim的 全局配置路径：   执行vim然后输入:echo $VIMRUNTIME  修改默认配置文件：sudo vim $VIMRUNTIME/defaults.vim 具体可以修改的文件的功能 可以用下面的 保存文件完成修改：  :wq    可以修改的配置 1 2 3 4 5 6 7 8 9 10 11 12 13  #设置语法高亮 echo &amp;#39;syntax on&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启行号显示【标准方式】或上面的【简写方式】也可以 echo &amp;#39;set number&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启行号显示【简写方式】或下面的【标准方式】也可以 echo &amp;#39;set nu&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启拼写检查 echo &amp;#39;set spell&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Vmware安装</title>
      <link>http://127.0.0.1:1313/hugo/install/vmware%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/vmware%E5%AE%89%E8%A3%85/</guid>
      <description>linux安装VMware Workstation16 1.安装包  VMware-Workstation-Full-16.2.1-18811642.x86_64 下载地址  2.密钥  　ZF3R0-FHED2-M80TY-8QYGC-NPKYF +　YF390-0HF8P-M81RQ-2DXQE-M2UT6 +　ZF71R-DMX85-08DQY-8YMNC-PPHV8 如果不行 自行百度  3.赋予权限  chmod 777 VMware-Workstation-Full-16.2.1-18811642.x86_64.bundle  4.开始安装  sudo ./VMware-Workstation-Full-16.2.1-18811642.x86_64.bundle  5.后续安装  安装界面 跟windows的差不多 类似 (后续补充)  </description>
    </item>
    
    <item>
      <title>Zerotier</title>
      <link>http://127.0.0.1:1313/hugo/network/zerotier/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/network/zerotier/</guid>
      <description>zerotier centos7安装zerotier  安装  curl -s https://install.zerotier.com/ | sudo bash   加入网络  sudo zerotier-cli join NetworkID   查看网络信息  zerotier-cli info    </description>
    </item>
    
    <item>
      <title>Zh</title>
      <link>http://127.0.0.1:1313/hugo/about/zh/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/zh/</guid>
      <description>1. hugo入门  git hugo vscodium  2. markdown的图片 解决  picgo gitea(免费图床) typora+picgo+gitea 或者 vscodium+picgo+gitea  3. gitea 创建帐号 [地址：][https://gitea.dongshanxia.top:35000/]
 创建帐号 帐号授权 （跟我说哪个帐号） 拉取hugo 项目代码 本地启动拉取项目  </description>
    </item>
    
    <item>
      <title>安装es</title>
      <link>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85es/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85es/</guid>
      <description>警告  es 最好不要 7.10.2 之后的版本 推荐用opensearch-1.1.0  硬件服务器  10.168.2.87 10.168.2.88 10.168.2.89  1.环境准备 (每台都需要做) 1.1创建用户(root用户操作)  useradd top  1.2 修改用户密码(root用户操作)  passwd top  1.3 赋予用户sudo权限(root用户操作)   修改命令
1 2 3 4  chmod -v u+w /etc/sudoers sed -i &amp;#39;s#.*top.*##g&amp;#39; /etc/sudoers sed -i &amp;#39;s#root.*ALL=(ALL).*ALL#root ALL=(ALL) ALL \ntop ALL=(ALL) ALL#g&amp;#39; /etc/sudoers chmod -v u-w /etc/sudoers     1.4 安全limits文件限制   修改文件
1  vim /etc/security/limits.</description>
    </item>
    
    <item>
      <title>安装opensearch</title>
      <link>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85opensearch/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85opensearch/</guid>
      <description>说明  基于Elasticsearch7.10.2 的 opensearch-1.1.0  硬件服务器  10.168.2.87 10.168.2.88 10.168.2.89  1.环境准备 (每台都需要做) 1.1创建用户(root用户操作)  useradd top  1.2 修改用户密码(root用户操作)  passwd top  1.3 赋予用户sudo权限(root用户操作)   修改命令
1 2 3 4  chmod -v u+w /etc/sudoers sed -i &amp;#39;s#.*top.*##g&amp;#39; /etc/sudoers sed -i &amp;#39;s#root.*ALL=(ALL).*ALL#root ALL=(ALL) ALL \ntop ALL=(ALL) ALL#g&amp;#39; /etc/sudoers chmod -v u-w /etc/sudoers     1.4 安全limits文件限制   修改文件
1  vim /etc/security/limits.conf     增加的内容</description>
    </item>
    
    <item>
      <title>定制化iso</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</guid>
      <description>定制化iso 1、准备环境 1.1 安装需要的包 1  yum install createrepo mkisofs isomd5sum squashfs-tools   1.2 创建需要的目录 1 2  mkdir /opt/centos mkdir /opt/old   1.3 上传基础安装包 1 2  网上下载：CentOS-7-x86_64-Minimal-1708.iso 上传到 /opt/   1.4 挂载 1  mount /opt/CentOS-7-x86_64-Minimal-1708.iso /opt/old/   1.5 复制相关文件 1 2 3 4 5  cp -r /opt/old/* /opt/centos/ cp /opt/old/.discinfo /opt/centos/ cp /opt/old/.treeinfo /opt/centos/ cp /root/anaconda-ks.cfg /opt/centos/isolinux/base-ks.cfg chmod +w /opt/centos/isolinux/base-ks.cfg   1.</description>
    </item>
    
    <item>
      <title>搜索功能</title>
      <link>http://127.0.0.1:1313/hugo/search/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/search/</guid>
      <description>叟起来</description>
    </item>
    
    <item>
      <title>离线安装mysql</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Fri, 24 Dec 2021 14:34:17 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</guid>
      <description>离线安装mysql
1.查看是否安装
1 2  rpm -qa | grep mariadb rpm -qa | grep mysql   2.如果已安装则卸载rpm
rpm -e &amp;ndash;nodeps
&amp;ndash;nodeps:由于安装包的依赖问题，需要强制删除
3.下载rpm包
   rpm包     mysql-community-client   mysql-community-devel   mysql-community-libs   mysql-community-server   mysql-community-libs   mysql-community-common    4.将rpm包通过xftp等方式放入linux服务器
5.根据rpm安装
到rpm包目录下使用命令
1  rpm -ivh --force mysql-community-common-5.7.24-1.el7.x86_64.rpm mysql-community-libs-5.7.24-1.el7.x86_64.rpm mysql-community-client-5.7.24-1.el7.x86_64.rpm mysql-community-server-5.7.24-1.el7.x86_64.rpm mysql-community-devel-5.7.24-1.el7.x86_64.rpm mysql-community-libs-compat-5.7.24-1.el7.x86_64.rpm   6.启动mysql
1  service mysqld start   7.</description>
    </item>
    
  </channel>
</rss>
