<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://127.0.0.1:1313/hugo/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 Jul 2021 10:15:04 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LetusEncrypt</title>
      <link>http://127.0.0.1:1313/hugo/network/letusencrypt/</link>
      <pubDate>Thu, 29 Jul 2021 10:15:04 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/network/letusencrypt/</guid>
      <description>1.http与https  简单的说:  https = http+ssl(安全访问) https 比较安全    2.Let&amp;rsquo;s Encrypt  想要 https 就是购买证书 在 Let&amp;rsquo;s Encrypt可以免费申请证书 官网  3.Certbot  Let&amp;rsquo;s Encrypt 官网提供的服务端的API 但是 作为使用者 还是别去研究API 官网有很多语言的客户端的 (java,go) 官网要推荐的客户端 cerbot  4.开启 Certbot 之旅  好像有多种模式 ,多种插件 (多条岔路容易错误) 无插件 certbot 完成对SSL证书的 申请和续约  4.1 准备环境  系统 debian (debian:buster-slim) 需要能连接互联网 会用apt命令  4.2 安装certbot  更新 apt 源索引 apt update 安装 certbot  apt install certbot    4.</description>
    </item>
    
    <item>
      <title>SkyWalking搭建(一)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Tue, 27 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>基于 docker 部署 skywalking 并实现 SpringBoot 全链路监控 [toc]
一、安装环境部署 下载镜像：
1 2 3  $ docker pull docker pull elasticsearch:7.10.1 $ docker pull apache/skywalking-oap-server:8.3.0-es7 $ docker pull apache/skywalking-ui:8.3.0   1.1 Docker 中安装 Elasticsearch7.6.2（方式一） 安装 Elasticsearch
注意：使用版本为 7.6.2，你可以选择其他版本 拉取镜像
1  docker pull elasticsearch:7.6.2   启动容器
1 2 3  docker run --restart=always -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; \ -e ES_JAVA_OPTS=&amp;#34;-Xms512m -Xmx512m&amp;#34; \ --name=&amp;#39;elasticsearch&amp;#39; --cpuset-cpus=&amp;#34;1&amp;#34; -m 2G -d elasticsearch:7.</description>
    </item>
    
    <item>
      <title>SkyWalking搭配springboot应用(三)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89-/</guid>
      <description>上传springboot的jar包 1  cd /opt/jar   修改agent配置 1 2 3 4 5 6 7  cd /opt/software/skywalking/apache-skywalking-apm-bin mkdir /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot cp /opt/software/skywalking/apache-skywalking-apm-bin/agent/* /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot # 修改应用名称 vim /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/config/agent.config   启动应用 1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking监控mysql(四)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</guid>
      <description>  准备以mysql为数据库的springboot应用
  上传jar到指定目录
  使用java-agent启动springboot应用
1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar      可以在ui服务上看到，从用户请求到mysql的过程，还可以看到执行了什么sql,方便查找问题
  </description>
    </item>
    
    <item>
      <title>SkyWalking配合tomcat使用(二)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</guid>
      <description>上传tomcat至服务器 1 2  #下载tomcat8 https://tomcat.apache.org/download-80.cgi   修改tomcat配置 1 2 3 4  # 端口修改8081 vim /opt/software/apache-tomcat-8.5.68/conf/server.xml # 修改tomcat启动方式 在加catalina.sh最上面！ CATALINA_OPTS=&amp;#34;$CATALINA_OPTS-javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar&amp;#34;; export CATALINA_OPTS   上传springMvc的war包 1  cd /opt/software/apache-tomcat-8.5.68/webapps/   启动tomcat 1  ./opt/software/apache-tomcat-8.5.68/bin/startup.sh    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking配置覆盖(五)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</link>
      <pubDate>Tue, 13 Jul 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking%E9%85%8D%E7%BD%AE%E8%A6%86%E7%9B%96%E4%BA%94/</guid>
      <description>之前使用agent，我们需要每起一个应用都cp一份agent文件，因为应用名称实在agen.config中配置的，为了避免这么麻烦，可以利用配置覆盖，使用同一个agent文件达到不同配置的目的
 配置覆盖 默认情况下，SkyWalking为agent提供了agent.config配置文件。
配置覆盖意味着用户可以通过系统属性或agent选项覆盖配置文件中的配置。 title: &amp;ldquo;skywalking配置覆盖&amp;rdquo; date: 2021-07-13T16:27:57+08:00 draft: false author: &amp;ldquo;ggball&amp;rdquo; tags: [&amp;ldquo;skywalking&amp;rdquo;] categories: [&amp;ldquo;java&amp;rdquo;] description: &amp;ldquo;skywalking配置覆盖&amp;rdquo; 系统属性 使用 skywalking. + 配置文件中的配置名 作为系统属性的配置名来覆盖配置文件中的值。
  为什么需要这个前缀？
因为agent系统属性是和目标应用共享的，加前缀是为了避免冲突。
  例子
通过下面的系统属性覆盖agent.application_code。
1  -Dskywalking.agent.application_code=31200   实际案例
1 2 3 4 5 6  -Dskywalking.agent.service_name=skywalking_mysql #实际语句 java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar \ -Dskywalking.agent.service_name=skywalking_mysql \ /opt/jar/mysql-boot.jar     java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar
-Dskywalking.agent.service_name=transaction1
/opt/jar/transaction1.jar
&amp;ndash;PROFILE=test
&amp;ndash;server.port=8002 &amp;amp;
java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar</description>
    </item>
    
    <item>
      <title>Gitlab</title>
      <link>http://127.0.0.1:1313/hugo/git/gitlab/</link>
      <pubDate>Tue, 13 Jul 2021 15:30:29 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/git/gitlab/</guid>
      <description>gitlab docker-compose  配置文件  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 在工作目录下创建 docker-compose.yml 文件，编辑以下内容version:&amp;#34;3&amp;#34;services:gitlab:image:&amp;#39;gitlab/gitlab-ce:latest&amp;#39;restart:alwayscontainer_name:gitlabports:- &amp;#39;80:80&amp;#39;volumes:- &amp;#39;/docker/software/gitlab/config:/etc/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/logs:/var/log/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/data:/var/opt/gitlab&amp;#39;environment:TZ:&amp;#39;Asia/Shanghai&amp;#39;GITLAB_OMNIBUS_CONFIG:|external_url &amp;#39;http://127.0.0.1:80&amp;#39;# Add any other gitlab.rb configuration here, each on its own linegitlab_rails[&amp;#39;gitlab_ssh_host&amp;#39;] = &amp;#39;127.0.0.1&amp;#39;# gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 26013   初始密码  1 2  /docker/software/gitlab/config/initial_root_password 查找(docker 挂载出来的路径)   </description>
    </item>
    
    <item>
      <title>Parted</title>
      <link>http://127.0.0.1:1313/hugo/linux/parted/</link>
      <pubDate>Wed, 07 Jul 2021 16:58:26 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/parted/</guid>
      <description>parted 规划分区   进入某个磁盘的分区
 parted /dev/sdb    新建标签类型
  mklabel
  1 2 3 4  (parted) mklabel 新的磁盘标签类型？ gpt 警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue? 是/Yes/否/No? yes       新建分区
  mkpart
  1 2 3 4 5  (parted) mkpart 分区名称？ []?</description>
    </item>
    
    <item>
      <title>定制化iso</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</link>
      <pubDate>Tue, 06 Jul 2021 18:11:22 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</guid>
      <description>定制化iso 1、准备环境 1.1 安装需要的包 1  yum install createrepo mkisofs isomd5sum squashfs-tools   1.2 创建需要的目录 1 2  mkdir /opt/centos mkdir /opt/old   1.3 上传基础安装包 1 2  网上下载：CentOS-7-x86_64-Minimal-1708.iso 上传到 /opt/   1.4 挂载 1  mount /opt/CentOS-7-x86_64-Minimal-1708.iso /opt/old/   1.5 复制相关文件 1 2 3 4 5  cp -r /opt/old/* /opt/centos/ cp /opt/old/.discinfo /opt/centos/ cp /opt/old/.treeinfo /opt/centos/ cp /root/anaconda-ks.cfg /opt/centos/isolinux/base-ks.cfg chmod +w /opt/centos/isolinux/base-ks.cfg   1.</description>
    </item>
    
    <item>
      <title>Picgo</title>
      <link>http://127.0.0.1:1313/hugo/other/picgo/</link>
      <pubDate>Thu, 01 Jul 2021 12:05:58 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/other/picgo/</guid>
      <description>picgo  地址 : /home/zhu/software/node/node-v14.15.0-linux-x64/bin 文件内容  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/usr/bin/env /home/zhu/software/node/node-v14.15.0-linux-x64/bin/node const path = require(&amp;#39;path&amp;#39;) const minimist = require(&amp;#39;minimist&amp;#39;) const argv = minimist(process.argv.slice(2)) let configPath = argv.c || argv.config || &amp;#39;&amp;#39; if (configPath !== true &amp;amp;&amp;amp; configPath !== &amp;#39;&amp;#39;) { configPath = path.resolve(configPath) } else { configPath = &amp;#39;&amp;#39; } const PicGo = require(&amp;#39;.</description>
    </item>
    
    <item>
      <title>离线安装mysql</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Thu, 01 Jul 2021 11:37:32 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</guid>
      <description>离线安装mysql
1.查看是否安装
1 2  rpm -qa | grep mariadb rpm -qa | grep mysql   2.如果已安装则卸载rpm
rpm -e &amp;ndash;nodeps
&amp;ndash;nodeps:由于安装包的依赖问题，需要强制删除
3.下载rpm包
   rpm包     mysql-community-client   mysql-community-devel   mysql-community-libs   mysql-community-server   mysql-community-libs   mysql-community-common    4.将rpm包通过xftp等方式放入linux服务器
5.根据rpm安装
到rpm包目录下使用命令
1  rpm -ivh --force mysql-community-common-5.7.24-1.el7.x86_64.rpm mysql-community-libs-5.7.24-1.el7.x86_64.rpm mysql-community-client-5.7.24-1.el7.x86_64.rpm mysql-community-server-5.7.24-1.el7.x86_64.rpm mysql-community-devel-5.7.24-1.el7.x86_64.rpm mysql-community-libs-compat-5.7.24-1.el7.x86_64.rpm   6.启动mysql
1  service mysqld start   7.</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>http://127.0.0.1:1313/hugo/about/readme/</link>
      <pubDate>Wed, 30 Jun 2021 17:22:07 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/readme/</guid>
      <description>环境准备  需要有hugo的环境  下载项目 hugo地址
创建一个属于某一个的类的文件  hugo new linux/aa.md  最好在项目的根目录执行 linux 相当于文件夹    浏览地址  xcb-github netlify-github xcb-gitlab 如果需要自动部署到自己平台 就直接CICD  </description>
    </item>
    
    <item>
      <title>Crontab</title>
      <link>http://127.0.0.1:1313/hugo/linux/crontab/</link>
      <pubDate>Mon, 28 Jun 2021 16:27:57 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/crontab/</guid>
      <description>crontab  查看 crontab -l 编辑  crontab -e   如何配置  1 2 3 4 5 6 7 8  * * * * * - - - - - | | | | | | | | | +----- 星期中星期几 (0 - 6) (星期天 为0) | | | +---------- 月份 (1 - 12) | | +--------------- 一个月中的第几天 (1 - 31) | +-------------------- 小时 (0 - 23) +------------------------- 分钟 (0 - 59)     例子</description>
    </item>
    
    <item>
      <title>Httpd</title>
      <link>http://127.0.0.1:1313/hugo/linux/httpd/</link>
      <pubDate>Mon, 28 Jun 2021 16:27:24 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/httpd/</guid>
      <description>httpd访问网络配置httpd_can_network_connect 检查网络访问的配置
getsebool -a | grep httpd_can_network_connect
如结果如下
httpd_can_network_connect &amp;ndash;&amp;gt; off
则执行如下命令打开：
SELinux命令，临时配置，重启后失效 setsebool httpd_can_network_connect=1
写入配置文件的命令，重启后保留
setsebool -P httpd_can_network_connect 1</description>
    </item>
    
    <item>
      <title>Ssh</title>
      <link>http://127.0.0.1:1313/hugo/linux/ssh/</link>
      <pubDate>Thu, 17 Jun 2021 14:26:33 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/ssh/</guid>
      <description>生成公钥和私钥 1  ssh-keygen -t ed25519 -C &amp;#34;984801940@qq.com&amp;#34;    后面第一个设置名字 后面设置访问密码 （免密当然就是这个）  </description>
    </item>
    
    <item>
      <title>Go_install</title>
      <link>http://127.0.0.1:1313/hugo/go/go_install/</link>
      <pubDate>Fri, 04 Jun 2021 16:44:35 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/go/go_install/</guid>
      <description>go 安装 1.下载地址  https://golang.google.cn/dl/  2.linux安装 1  tar -C /usr/local -xzf go.*.linux-amd64.tar.gz   3. 配置环境变量 1 2  export GO_HOME=/usr/local/go export PATH=$GO_HOME/bin:$PATH   4.生效环境变量 1  source 环境变量文件   </description>
    </item>
    
    <item>
      <title>linux好玩的</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</link>
      <pubDate>Thu, 27 May 2021 10:09:53 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</guid>
      <description>linux 好玩 压缩  tar -zcvf soft.tar.gz /soft/ /dir /dir  解压  tar -zxvf /soft.tar.gz -C /  查看版本  cat /etc/issue 查看版本  shell脚本的运行方式 1.set -x 或set xtrace
会显示+以及脚本中的内容(执行的部分，没执行的不显示)
set -xv（脚本中所有的内容都显示，包括没执行的部分）
查看端口号 netstat -lnp|grep 8080
查找某个文件 1 2  ## 寻找某个文件 find . -name &amp;#34;*.tar&amp;#34;   软连接 1  ln -s /data/mysql3306/config/my.cnf /etc/mysql/my.cnf   查询服务详情 1  journalctl -u 服务名   </description>
    </item>
    
  </channel>
</rss>
