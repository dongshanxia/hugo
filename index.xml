<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://127.0.0.1:1313/hugo/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Mar 2022 10:22:03 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1.%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1.%E7%9B%AE%E5%BD%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.JAVA多线程并发</title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/4.-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/4.-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7和yum完全卸载及重装</title>
      <link>http://127.0.0.1:1313/hugo/linux/yum/centos7_python2.7%E5%92%8Cyum%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BD%E5%8F%8A%E9%87%8D%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/yum/centos7_python2.7%E5%92%8Cyum%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BD%E5%8F%8A%E9%87%8D%E8%A3%85/</guid>
      <description>Centos7_python2.7和yum完全卸载及重装 删除现有Python  rpm -qa|grep python|xargs rpm -ev &amp;ndash;allmatches &amp;ndash;nodeps ##强制删除已安装程序及其关联 whereis python |xargs rm -frv ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令 whereis python ##验证删除，返回无结果  删除现有的yum  rpm -qa|grep yum|xargs rpm -ev &amp;ndash;allmatches &amp;ndash;nodeps whereis yum |xargs rm -frv  安装python以及yum的rpm包 安装python  cd /usr/local/src/python rpm -ivh python-* rpm-python-* &amp;ndash;nodeps &amp;ndash;force  安装yum  rpm -ivh yum-* &amp;ndash;nodeps &amp;ndash;force  </description>
    </item>
    
    <item>
      <title>B&#43;树索引的由来</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/14.b&#43;%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E7%94%B1%E6%9D%A5/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/14.b&#43;%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E7%94%B1%E6%9D%A5/</guid>
      <description>B+树索引的由来 从前面讲的InnoDB数据页结构，特别是页目录，我们可以了解到，记录在页里面是以单链表的形式存在，而页与页之间构成了双向链表。
那么我们应该采取什么样的方式来更高效查询数据呢？
1.我们先来假设不了解什么是索引，我们会怎么查找？ 比如根据主键条件搜索，可以再页目录中用二分查找查到属于那条记录
如果是非主键列呢，因为在数据页中并没有对非主键列建立所谓的 页目录，可能要一个一个按顺序找，知道找到匹配的记录
2.如果在很多页中查找？ 大部分情况下我们表中存放的记录都是非常多的，需要好多的数据页来存储这些记录。在很多页中查找记录的话可以分为两个步骤：
  定位到记录所在的页。
  从所在的页内中查找相应的记录。
在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚唠叨过的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是超级耗时的，如果一个表有一亿条记录，使用这种方式去查找记录那要等到猴年马月才能等到查找结果。所以祖国和人民都在期盼一种能高效完成搜索的方法， 索引 同志就要亮相登台了。
  B+树索引 我们现在就遇到了个难题，在一个数据页里面根据主键查询记录，可以很快的查询出来，但是数据库的数据会越来越多，数据页也会越来越多，页与页之间现在没有办法根据主键查到记录属于哪个页？
要是能像一个数据页里面根据二分法查记录就好，咦！没错，就是这个思路！
设计InnoDB的大叔，给多个数据页分配了各自的目录，方便查找到某个数据页，比如下面
 就像一本字典，大部分装着对单词的解释（数据页），前面一部分是目录（存放目录项记录的数据页），都占据着书本的空间，但是起到方便查找的作用
 从图中可以看出来，我们新分配了一个编号为 30 的页来专门存储 目录项记录 。这里再次强调一遍 目录项记录和普通的 用户记录 的不同点：
 目录项记录 的 record_type 值是1，而普通用户记录的 record_type 值是0。 目录项记录 只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有 InnoDB 自己添加的隐藏列。 还记得我们之前在唠叨记录头信息的时候说过一个叫 min_rec_mask 的属性么，只有在存储 目录项记录 的页中的主键值最小的 目录项记录 的 min_rec_mask 值为 1 ，其他别的记录的 min_rec_mask 值都是 0 。  除了上述几点外，这两者就没啥差别了，它们用的是一样的数据页（页面类型都是 0x45BF ，这个属性在 File Header 中，忘了的话可以翻到前边的文章看），页的组成结构也是一样一样的（就是我们前边介绍过的7个部分），都会为主键值生成 Page Directory （页目录），从而在按照主键值进行查找时可以使用二分法来加快查询速度。现在以查找主键为 20 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</description>
    </item>
    
    <item>
      <title>Date命令</title>
      <link>http://127.0.0.1:1313/hugo/linux/date%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/date%E5%91%BD%E4%BB%A4/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/usr/bin/env bash  year=`date +&amp;#34;%Y&amp;#34;` month=`date +&amp;#34;%-m&amp;#34;` day=`date +&amp;#34;%-d&amp;#34;` hour=`date +&amp;#34;%-H&amp;#34;` minute=`date +&amp;#34;%-M&amp;#34;` second=`date +&amp;#34;%-S&amp;#34;` week=`date +&amp;#34;%-w&amp;#34;` numWeek=`date +&amp;#34;%-W&amp;#34;` echo &amp;#34;year: &amp;#34;${year} echo &amp;#34;month: &amp;#34;${month} echo &amp;#34;day: &amp;#34;${day} echo &amp;#34;hour: &amp;#34;${hour} echo &amp;#34;minute: &amp;#34;${minute} echo &amp;#34;second: &amp;#34;${second} echo &amp;#34;week: &amp;#34;${week} echo &amp;#34;numWeek:&amp;#34;${numWeek} val=`expr ${numWeek} % 4` echo ${val}   </description>
    </item>
    
    <item>
      <title>Docker Compose安装</title>
      <link>http://127.0.0.1:1313/hugo/install/docker-compose%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/docker-compose%E5%AE%89%E8%A3%85/</guid>
      <description>docker-compose安装步骤 1.下载 url: https://github.com/docker/compose/releases 备用地址：192.168.1.9:8080/share.cgi?ssid=05dGVzz
2.上传 sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
3.安装 sudo chmod +x /usr/local/bin/docker-compose</description>
    </item>
    
    <item>
      <title>Docker命令</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker%E5%91%BD%E4%BB%A4/</guid>
      <description>docker说明 搜索镜像  docker search 镜像名 https://hub.docker.com/  拉取镜像  docker pull NAME[:TAG] 可以-q 去除详细输出  保存镜像  docker save -o localName NAME[:TAG] docker save -o cjpt-service-alarm-user.tar cjpt-service-alarm-user:latest （） 上面的解释： 将镜像中的 镜像名为 cjpt-service-alarm-user 标签为 latest 保存到 同一目录 名为cjpt-service-alarm-user.tar  查看本地镜像  docker images   加载镜像  docker load &amp;lt; 压缩包名 docker load &amp;ndash;input 压缩包名 docker load &amp;lt; cjptjava8.tar 加载cjptjava8.tar的镜像  给镜像修改名称   docker tag imageId REPOSITORY:TAG   imageId: 镜像的id REPOSITORY：本地镜像名称 TAG: 标记</description>
    </item>
    
    <item>
      <title>Docker安装</title>
      <link>http://127.0.0.1:1313/hugo/install/docker%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/docker%E5%AE%89%E8%A3%85/</guid>
      <description>docker安装 一、yum安装 1. 卸载原来的docker 1 2 3 4 5 6 7 8  sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine   2. 安装前置库 1 2 3  sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2   3. 下载 docker-ce 的仓库 1 2 3  sudo yum-config-manager \ --add-repo \ https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo   https://download.docker.com/linux/centos/docker-ce.repo # 另外的 仓库地址  4.</description>
    </item>
    
    <item>
      <title>Docker清理</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker%E6%B8%85%E7%90%86/</guid>
      <description>列出无用的卷 1  docker volume ls -qf dangling=true   清理无用的卷 1  docker volume rm $(docker volume ls -qf dangling=true)   清除推出的容器 1  docker rm $(docker ps -a | grep &amp;#34;Exited&amp;#34; | awk &amp;#39;{print $1}&amp;#39;)   清除none的 镜像 1  docker rmi $(docker images | grep &amp;#34;&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#39;{print $3}&amp;#39;)   </description>
    </item>
    
    <item>
      <title>EXPLAIN 语句输出的各个列解释</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/17.explain-%E8%AF%AD%E5%8F%A5%E8%BE%93%E5%87%BA%E7%9A%84%E5%90%84%E4%B8%AA%E5%88%97%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/17.explain-%E8%AF%AD%E5%8F%A5%E8%BE%93%E5%87%BA%E7%9A%84%E5%90%84%E4%B8%AA%E5%88%97%E8%A7%A3%E9%87%8A/</guid>
      <description>EXPLAIN 语句输出的各个列解释    列名 描述     id 在一个大的查询语句中每个 SELECT 关键字都对应一个唯一的 id   select_type SELECT 关键字对应的那个查询的类型   table 表名   partitions 匹配的分区信息   type 针对单表的访问方法   possible_keys 可能用到的索引   key 实际上使用的索引   key_len 实际使用到的索引长度   ref 当使用索引列等值查询时，与索引列进行等值匹配的对象信息   rows 预估的需要读取的记录条数   filtered 某个表经过搜索条件过滤后剩余记录条数的百分比   Extra 一些额外的信息    select_type 每一个 SELECT 关键字代表的小查询都定义了一个称之为 select_type 的属性，意思是我们 只要知道了某个小查询的 select_type 属性，就知道了这个小查询在整个大查询中扮演了一个什么角色</description>
    </item>
    
    <item>
      <title>explain之访问方法</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/16.explain%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/16.explain%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</guid>
      <description>MySQL 执行查询语句的方式称之为 访问方法 或者 访问类型
 访问方法 const：通过主键或者唯一二级索引列与常数的等值比较来定位一条记录。意思是常数级别的，代价是可以忽略不计的。不过这种 const 访问方法只能在主键
列或者唯一二级索引列和一个常数进行等值比较时才有效，如果主键或者唯一二级索引是由多个列构成的话，索引中的每一个列都需要与常数进行等值比较，
这个const 访问方法才有效（这是因为只有该索引中全部列都采用等值比较才可以定位唯一的一条记录）。
 对于唯一二级索引来说，查询该列为 NULL 值的情况比较特殊，比如这样：
SELECT * FROM single_table WHERE key2 IS NULL;
因为唯一二级索引列并不限制 NULL 值的数量，所以上述语句可能访问到多条记录，也就是说 上边这个语句不可以使用 const 访问方法来执行
 ref：搜索条件为二级索引列与常数等值比较来定位多条记录，采用二级索引来执行查询的访问方法
ref_or_null： 当对普通二级索引进行等值匹配查询，该索引列的值也可以是 NULL 值时，那么对该表的访问方法就可能是ref_or_null
range： 利用索引进行范围匹配的访问方法。
index：
看下边这个查询：
1  SELECT key_part1, key_part2, key_part3 FROM single_table WHERE key_part2 = &amp;#39;abc&amp;#39;;   由于 key_part2 并不是联合索引 idx_key_part 最左索引列，所以我们无法使用 ref 或者 range 访问方法来执行这个语句。但是这个查询符合下边这两个条件：
 它的查询列表只有3个列： key_part1 , key_part2 , key_part3 ，而索引 idx_key_part 又包含这三个列。 搜索条件中只有 key_part2 列。这个列也包含在索引 idx_key_part 中。  也就是说我们可以直接通过遍历 idx_key_part 索引的叶子节点的记录来比较 key_part2 = &amp;lsquo;abc&amp;rsquo; 这个条件是否成立，把匹配成功的二级索引记录的 key_part1 ,</description>
    </item>
    
    <item>
      <title>InnoDB数据页结构</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/13.innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/13.innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84/</guid>
      <description>InnoDB数据页结构 [toc]
不同类型页 InnoDB存储引擎为了出于不同的存储目的设计多种类型的页，比如
存放表空间头部信息的页，存放 Insert Buffer信息的页，存放 INODE 信息的页，存放 undo 日志信息的页等等等等
其中这次重点介绍：存放数据表中记录的那种类型的页，官方称这种存放记录的页为索引（ INDEX ）页
数据页结构 InnoDB 数据页的存储空间大致被划分成了 7 个部分
   名称 中文名 占用空间大小 简单描述     File Header 文件头部 38字节 页的一些通用信息   Page Header 页面头部 56字节 数据页专有的一些信息   Infimum + Supremum 最小记录和最大记录 26字节 两个虚拟的行记录   User Records 用户记录 不确定 实际存储行记录内容   Free Space 空闲空间 不确定 页中尚未使用的空间   Page Directory 页面目录 不确定 页中的某些记录的相对位置   File Trailer 文件尾部 8字节 校验页是否完整    记录在页中的储存 在页的7个组成部分中，我们自己存储的记录会按照我们指定的 行格式 存储到 User Records 部分。但是在一开始生成页的时候，其实并没有 User Records 这个部分，每当我们插入一条记录，都会从 Free Space 部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到 User Records 部分，当 Free Space 部分的空间全部被 User Records 部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了，这个过程的图示如下：</description>
    </item>
    
    <item>
      <title>InnoDB的BufferPool</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/18.mysql%E4%B9%8Binnodb%E7%9A%84bufferpool/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/18.mysql%E4%B9%8Binnodb%E7%9A%84bufferpool/</guid>
      <description>InnoDB的BufferPool 为什么需要缓存？ 因为存储引擎需要访问某一条记录时，是通过页作为基本单位读取到内存的，但是如果每次就因为一两条数据而把一页的数据从磁盘读取到内存有点耗费性能了，这样就多了缓存的概念，在进行完读写访问之后并不着急把该页对应的内存空间释放掉，而是将其 缓存 起来，这样将来有请求再次访问该页面时，就可以省去磁盘 IO 的开销了。
Buffer Pool 概念 在 MySQL 服务器启动的时候就向操作系统申请了一片连续的内存，他们给这片内存起了个名，叫做 Buffer Pool （中文名是 缓冲池 ）。
默认情况下 Buffer Pool 只有 128M 大小
参数配置
1 2  [server] innodb_buffer_pool_size = 268435456   内部组成 控制块 ，这些控制块包括该页所属的表空间编号、页号、缓存页在 Buffer Pool 中的地址、链表节点信息、一些锁信息以及 LSN 信息，控制块和缓存页是一一对应的，它们都被存放到 Buffer Pool 中，其中控制块被存放到 Buffer Pool的前边，缓存页被存放到 Buffer Pool 后边。
free链表的管理 为了让存储引擎能区分，哪些缓存页被用过，哪些没有被用过，没有被用过的缓存页就用来装要被缓存的页嘛。InnoDB的大叔又给设计出了free链表，来解决这个问题。
free链表：把所有空闲的缓存页对应的控制块作为一个节点放到一个链表中，这个链表也可以被称作 free链表。
流程：在缓存池初始化时，大量的缓存页是都没有被使用过的，他们的控制块都会被加入到链表中（个人认为是拿到控制块的物理地址），当有缓存需要填充缓存页，那么先从free链表取一个控制块，填充控制块信息（就是该页所在的表空间、页号之类的信息），之后就是将控制块从free链表移除。
flush链表管理 背景：当我们修改数据时，会先修改缓存池中的缓存页，而不会立即修改对应磁盘上的页，这时候缓存池的页的数据和磁盘上的页的数据不一致，这个页就成为脏页。（未来会同步这个页的数据）
概念：脏页的控制块组成的链表
组成
LRU（Least Recently Used）链表管理
概念：由于这个链表是为了 按照最近最少使用 的原则去淘汰缓存页的，所以这个链表可以被称为 LRU链表
组成：控制块组成的链表，前一部分是热数据（young区域），后面一部分为冷数据（old区域）
过程：只要我们使用到某个缓存页，就把该缓存页调整到 LRU链表 的头部，这样 LRU链表 尾部就是最近最少使用的缓存页喽</description>
    </item>
    
    <item>
      <title>InnoDB记录结构</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/12.innodb%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/12.innodb%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>InnoDB记录结构 innoDB存储引擎介绍 存储引擎的作用就是内存和磁盘打交道，负责将数据在他两之间传输，为了提高传输效率，提出了“页”的概念，也就是在一般情况下，为了减少io次数，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。
 页：将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为 16 KB。
 innoDB行格式 行格式：记录在磁盘上的存放方式称为行格式。
四种行格式：Compact 、 Redundant 、Dynamic 和 Compressed 行格式。
指定行格式命令 1 2 3 4 5 6 7 8 9 10 11  REATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称 ALTER TABLE 表名 ROW_FORMAT=行格式名称 mysql&amp;gt; CREATE TABLE record_format_demo ( -&amp;gt; c1 VARCHAR(10), -&amp;gt; c2 VARCHAR(10) NOT NULL, -&amp;gt; c3 CHAR(10), -&amp;gt; c4 VARCHAR(10) -&amp;gt; ) CHARSET=ascii ROW_FORMAT=COMPACT; Query OK, 0 rows affected (0.03 sec)   介绍InnoDB的Compact行格式 可以把记录分为记录额外信息，记录真实数据</description>
    </item>
    
    <item>
      <title>Jar简易自检程序</title>
      <link>http://127.0.0.1:1313/hugo/linux/shell/jar%E7%AE%80%E6%98%93%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/shell/jar%E7%AE%80%E6%98%93%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</guid>
      <description>jar 简易自检程序  脚本  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #!/bin/sh #line=&amp;#39;cat .</description>
    </item>
    
    <item>
      <title>java日志体系</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB/</guid>
      <description>java日志体系 常用日志框架
 Log4j：Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j 2：Apache Log4j 2是Apache开发的一款Log4j的升级产品。 Commons Logging：Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging。Apache推出了JCL（Jakarta Commons Logging），它只是定义了一套日志接口（其内部也提供一个Simple Log的简单实现），JCL也是一套接口规范，支持运行时动态加载日志组件的实现。也就是说，在应用程序代码中，只需调用Commons Logging的接口，底层实现可以是Log4j，也可以是JUL SLF4J：全称为Simple Logging Facade for Java，类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。 Logback：是一套日志组件的实现，属于SLF4J阵营。 JUL：全称是Java Util Logging，是JDK1.4以后提供的日志实现。  mybatis日志体系 日志接口 定义了打印日志的级别
日志实现 配置日志框架的三种方式 1. 手动指定日志框架 1.先确定日志的Constructor对象
2.再利用Constructor对象和类名创建日志对象
3.打印日志的功能交给其他对象
2. 自动配置日志框架 如果不指定日志框架，mybatis也会尝试去找日志的实现
LogFactory中有静态代码块，会率先执行里面的代码，顺序执行（MyBatis查找日志框架的顺序为SLF4J→JCL→Log4j2→Log4j→JUL→No Logging），注意这里的run不是线程的run的概念，单纯只是匿名函数，传入Runnable对象，会执行它的run方法而已
比如会先执行第一个useSlf4jLogging 方法，如果找不到Slf4j对应的jar包，会抛出异常，但是不做任何处理，则继续执行下一个useCommonsLogging方法，如果找到了对应的jar包，会创建
Constructor对象在LogFactory对象里，然后继续执行tryImplementation、useLog4JLogging方法，每次都会判断Constructor对象为空，如果不为空则不会执行Runnable对象的run方法，从而实现自动确定日志框架。
3. 配置文件指定日志框架 项目启动时，会去读取mybatis配置文件，将logImpl的值set到configuration对象，如果有配置日志实现，configuration对象会在调用setLogImpl，来创建指定日志的Constructor对象
总结 三种配置日志框架的方法，了解怎么把日志实现交给mybatis，mybatis如何设置日志框架的， 日志框架设计的很巧妙，接口和实现完全分开来，用户可以随意搭配实现。</description>
    </item>
    
    <item>
      <title>linux下文件操作命令</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</guid>
      <description>Linux下文件操作命令  tar命令  使用tar命令一般打包分为两种*.tar ,*.tar.gz 相信大家也使用过 tar -zcvf test.tar test/  tar -zcvf test.tar.gz test/ 两条命令为：将当前文件夹下的test文件夹中的所有数据压缩至test.tar* 解压后是 test/ 解压命令为：tar -zxvf **.tar tar -zxvf **.tar.gz  zip命令  压缩命令： zip -r test.zip test/ 解压命令： unzip test.zip &amp;ndash;解压至当前文件夹中   复制命令  cp test.zip /data/test &amp;ndash;将test.zip复制到/data/test中  cp -r test.zip /data/test &amp;ndash;将test.zip覆盖复制到/data/test中 /data/test路径中有test.zip 则直接替换  上传下载命令  rz 上传 会弹出本地窗口，选择文件 点击确定即可上传 scp 本地文件 远程主机用户@远程主机IP：远程目录 此命令需要输入密码 scp test.zip htga@192.168.200.128:/home/htga  </description>
    </item>
    
    <item>
      <title>linux主机名</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E4%B8%BB%E6%9C%BA%E5%90%8D/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E4%B8%BB%E6%9C%BA%E5%90%8D/</guid>
      <description>Linux系统的主机名 查询主机名  hostname hostnamectl  修改主机名 1  hostnamectl set-hostname &amp;lt;newhostname&amp;gt;   </description>
    </item>
    
    <item>
      <title>linux信号</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E4%BF%A1%E5%8F%B7/</guid>
      <description>SIGHUP 终止进程 终端线路挂断[喝小酒的网摘]http://blog.hehehehehe.cn/a/16999.htm SIGINT 终止进程 中断进程 SIGQUIT 建立CORE文件终止进程，并且生成core文件 SIGILL 建立CORE文件 非法指令 SIGTRAP 建立CORE文件 跟踪自陷 SIGBUS 建立CORE文件 总线错误 SIGSEGV 建立CORE文件 段非法错误 SIGFPE 建立CORE文件 浮点异常 SIGIOT 建立CORE文件 执行I/O自陷 SIGKILL 终止进程 杀死进程 SIGPIPE 终止进程 向一个没有读进程的管道写数据 SIGALARM 终止进程 计时器到时 SIGTERM 终止进程 软件终止信号 SIGSTOP 停止进程 非终端来的停止信号 SIGTSTP 停止进程 终端来的停止信号 SIGCONT 忽略信号 继续执行一个停止的进程 SIGURG 忽略信号 I/O紧急信号 SIGIO 忽略信号 描述符上可以进行I/O SIGCHLD 忽略信号 当子进程停止或退出时通知父进程 SIGTTOU 停止进程 后台进程写终端 SIGTTIN 停止进程 后台进程读终端 SIGXGPU 终止进程 CPU时限超时 SIGXFSZ 终止进程 文件长度过长 SIGWINCH 忽略信号 窗口大小发生变化 SIGPROF 终止进程 统计分布图用计时器到时 SIGUSR1 终止进程 用户定义信号1 SIGUSR2 终止进程 用户定义信号2 SIGVTALRM 终止进程 虚拟计时器到时</description>
    </item>
    
    <item>
      <title>linux好玩的</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E5%A5%BD%E7%8E%A9%E7%9A%84/</guid>
      <description>linux 好玩 压缩  tar -zcvf soft.tar.gz /soft/ /dir /dir  解压  tar -zxvf /soft.tar.gz -C /  查看版本  cat /etc/issue 查看版本  shell脚本的运行方式 1.set -x 或set xtrace
会显示+以及脚本中的内容(执行的部分，没执行的不显示)
set -xv（脚本中所有的内容都显示，包括没执行的部分）
查看端口号 netstat -lnp|grep 8080
查找某个文件 1 2  ## 寻找某个文件 find . -name &amp;#34;*.tar&amp;#34;   软连接 1  ln -s /data/mysql3306/config/my.cnf /etc/mysql/my.cnf   查询服务详情 1  journalctl -u 服务名   同步 1  rsync -avl /docker/software/MSSQL/ /home/data/mssql   </description>
    </item>
    
    <item>
      <title>linux用户</title>
      <link>http://127.0.0.1:1313/hugo/linux/linux%E7%94%A8%E6%88%B7/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/linux%E7%94%A8%E6%88%B7/</guid>
      <description>linux 用户 1、用户相关 1.1useradd  useradd 选项 用户名  1.2passwd  passwd 选项 用户名  1.3 例子： 1.3.1创建用户testuser 主目录为home/testuser 1  useradd –d /home/testuser -m testuser   1.3.2给testuser 创建密码 1  passwd testuser   1.3.3 删除用户 1  userdel testuser   1.3.4 切换用户  switch user 简写 su  su testuser 切到testuser exit 可以退出 su - testuser 切换到testuser 且切换环境变量 exit 可以退出    2、 用户组相关 /etc/group 2.</description>
    </item>
    
    <item>
      <title>Mssql安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/mssql%E5%AE%89%E8%A3%85/</guid>
      <description>mssql的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   1  docker load &amp;lt; mssql_1.tar     查看是否倒入成功   1  docker images | grep mssql       启动命令   1 2 3 4 5  docker container run --restart=always --name mssql -p 31433:31433 -v /docker/software/MSSQL/data:/var/opt/mssql/data/ -v /docker/software/MSSQL/log:/var/opt/mssql/log/ -v /docker/software/MSSQL/config:/var/opt/mssql/config -d registory.dongshanxia.top:35000/docker/MSSQL:1.0     docker-compose 文件
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: &amp;#34;3&amp;#34; services: MSSQL: image: registory.</description>
    </item>
    
    <item>
      <title>mybatis拦截器执行过程</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</guid>
      <description>m[toc]
mybatis的拦截器本人平时也很少用到，没了解之前，也只是知道运用到了动态代理用来增强方法的功能，但是不了解其中的原理。为了更好的使用mybatis，这次，我记录下我所了解的mybatis的原理，本文不一定完全正确，可能有理解不到位的地方。
1、使用mybatis的拦截器 像平常使用mybatis框架时，如果哪句sql报错了，我们可以通过控制台或日志打印的sql去查看sql的问题，但是如果sql有太多的参数，其实是很不方便的，自己还得手动去把一个一个参数给设置上，有些浪费时间，这时候就可以利用mybatis的拦截器去帮我们把参数给设置上。
 配置步骤
 1.创建拦截器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  @Intercepts({ @Signature(type = StatementHandler.class, method = &amp;#34;query&amp;#34;, args = {Statement.class, ResultHandler.class}), @Signature(type = StatementHandler.class, method = &amp;#34;update&amp;#34;, args = {Statement.class}), @Signature(type = StatementHandler.class, method = &amp;#34;batch&amp;#34;, args = {Statement.class}) }) public class SlowSqlInterceptor implements Interceptor { @Override public Object intercept(Invocation invocation) throws InvocationTargetException, IllegalAccessException { // 主要逻辑 拼接参数到sql，并打印  } @Override public Object plugin(Object target) { // 创建代理对象  return Plugin.</description>
    </item>
    
    <item>
      <title>mybatis核心组件</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  sequenceDiagram participant SqlSession participant Excutor participant StatementHandler participant parameterHandler participant ResultSetHandler participant TypeHandler participant ResultSet participant JDBC SqlSession-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;StatementHandler: StatementHandler--&amp;gt;&amp;gt;parameterHandler: StatementHandler--&amp;gt;&amp;gt;JDBC: parameterHandler--&amp;gt;&amp;gt;TypeHandler: parameterHandler-&amp;gt;&amp;gt;JDBC: JDBC-&amp;gt;&amp;gt;ResultSet: ResultSet--&amp;gt;&amp;gt;TypeHandler: ResultSet--&amp;gt;&amp;gt;ResultSetHandler: TypeHandler--&amp;gt;&amp;gt;ResultSetHandler: ResultSetHandler-&amp;gt;&amp;gt;StatementHandler: StatementHandler-&amp;gt;&amp;gt;Excutor: Excutor-&amp;gt;&amp;gt;SqlSession: Note left of SqlSession: asa   1 2 3 4  flowchart TD subgraph configuration mappedStatement1 --&amp;gt; mappedStatement2 end   configuration:</description>
    </item>
    
    <item>
      <title>mybati缓存了解</title>
      <link>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/mybatis/mybati%E7%BC%93%E5%AD%98%E4%BA%86%E8%A7%A3/</guid>
      <description>mybatis的缓存 首先来看下mybatis对缓存的规范，规范嘛就是定义的接口啦。
缓存接口 ​	Cache接口 定义了缓存的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  public interface Cache { /**获取缓存的id * @return The identifier of this cache */ String getId(); /**添加缓存 * @param key Can be any object but usually it is a {@link CacheKey} * @param value The result of a select.</description>
    </item>
    
    <item>
      <title>mysql之InnoDB数据目录结构</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/15.mysql%E4%B9%8Binnodb%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/15.mysql%E4%B9%8Binnodb%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>innoDB数据目录   表目录
  表名.frm文件（描述表结构的文件）
  .表名ibd文件（表数据和索引文件）
  视图名.frm文件（描述视图）
    &amp;hellip;
  mylSAM数据目录 表数据都存放到对应的数据库子目录下。假如 test 表使用 MyISAM 存储引擎的话，那么在它所在数据库对应的 xiaohaizi 目录下会为 test 表创建这三个文件：
 test.frm （描述表结构的文件） test.MYD （表数据文件） test.MYI （表索引文件） 视图名.frm文件（描述视图）  文件系统对数据库的影响  数据库名称和表名称不得超过文件系统所允许的最大长度。 特殊字符的问题 文件长度受文件系统最大长度限制  MySQL系统数据库简介  mysql  这个数据库贼核心，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。
 information_schema  这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引吧啦吧啦。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为元数据。
 performance_schema  这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，算是对MySQL服务器的一个性能监控。包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多长时间，内存的使用情况等等信息。
 sys  这个数据库主要是通过视图的形式把 information_schema 和 performance_schema 结合起来，让程序员可以更方便的了解MySQL服务器的一些性能信息。</description>
    </item>
    
    <item>
      <title>mysql事务</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/19.mysql%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/19.mysql%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务 需要保证 原子性 、 隔离性 、 一致性 和 持久性 的一个或多个数据库操作称之为一个 事务
原子性
一致性
​	保证一致性的努力：
 数据库本身能为我们保证一部分一致性需求。 更多的一致性需求需要靠写业务代码的程序员自己保证。  隔离性
持久性
数据从内存刷到磁盘
事务的状态  活动的（active）  事务对应的数据库操作正在执行过程中时，我们就说该事务处在 活动的 状态。
 部分提交的（partially committed）  当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并没有刷新到磁盘时，我们就说该事务处在 部分提
交的 状态。
 失败的（failed）  当事务处在 活动的 或者 部分提交的 状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续
执行，或者人为的停止当前事务的执行，我们就说该事务处在 失败的 状态。
 中止的（aborted）  如果事务执行了半截而变为 失败的 状态，比如我们前边唠叨的狗哥向猫爷转账的事务，当狗哥账户的钱被扣除，但是猫爷账户的钱
没有增加时遇到了错误，从而当前事务处在了 失败的 状态，那么就需要把已经修改的狗哥账户余额调整为未转账之前的金额，换句
话说，就是要撤销失败事务对当前数据库造成的影响。书面一点的话，我们把这个撤销的过程称之为 回滚 。当 回滚 操作执行完毕
时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了 中止的 状态。
 提交的（committed）  当一个处在 部分提交的 状态的事务将修改过的数据都同步到磁盘上之后，我们就可以说该事务处在了 提交的 状态。</description>
    </item>
    
    <item>
      <title>Mysql安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/mysql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/mysql%E5%AE%89%E8%A3%85/</guid>
      <description>docker-mysql安装部署文档 [TOC]
一、前置条件 1.1 前置环境  docker 环境 docker ps 必须可以用 docker-compose -version 必须可以用  1.2 安装包名 [docker-mysql_5.7.24_2020_8_27.tar]
1.3 升级服务器 ​	需要搭建 maven的机器
1.4 升级操作用户 ​	用户名 拥有docker权限的用户 （cjpt,alarm 都可以）
1.5 安装路径 ​	路径：/home/cjpt/temp/
1.6 升级涉及到的服务    服务名称 升级前版本号 升级后版本号     mysql  2.16.6    1.7 升级功能说明 docker-nexus 镜像
二、安装步骤 2.1 安装升级包 1 2 3 4  #### 进入安装目录 cd /home/cjpt/temp/ #### 进入安装目录 docker load &amp;lt; mysql.</description>
    </item>
    
    <item>
      <title>mysql思维导图</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/00.mysql%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/00.mysql%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description>mysql 1. 基础知识 1. cs架构 2. 安装与启动 3. 连接过程 1. 客户端发起连接（3种，tcp,命名通道与共享内存，socket） 2. 服务端接受连接 1. 处理连接 2. 解析与优化（1.查询缓存，2.语法解析，3.查询优化） 3. 存储引擎 4. 常用引擎 1. InnoDB 2. MyISAM 2. 启动选项与变量 1. 设置mysql启动参数（就近原则） 1. 命令行和配置文件 2. 配置文件 1. 系统变量 2. 状态变量 3. 字符串比较规则 1. 什么是字符集 使用二进制的一组数据代表现实世界的字符串。 常用字符集 GBK(最多2字节),uft8（最多3字节）,utf8mb4（最多4字节） 2. 字符集比较规则 用来比较同一种字符集的字符大小 3. 字符集应用 注意：对于同一个字符串，如果编码和解码采用的不同字符集，那么结果可能会不同。 4. 四个级别的字符集和比较规则 服务器级别 数据库级别 表级别 列级别 4. InnoDB记录结构 1. InnoDB页简介 磁盘和内存数据交互的最小单位，一页=16kb。 2. InnoDB行格式 1. 简介 记录存放在磁盘上的方式成为行格式 3. 行格式分类 1. compact类型行格式 1.</description>
    </item>
    
    <item>
      <title>mysql系统配置与启动选项</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/10.mysql%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/10.mysql%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9/</guid>
      <description>启动选项与系统变量 启动选项 长格式与短格式 在执行启动脚本时，后面可以跟启动选项，其中有长格式和短格式两种形式
​	短格式：选项名前只加一个短划线 -
​	长格式：选项名前加两个短划线 &amp;ndash;
配置选项 内容格式 与在命令行中指定启动选项不同的是，配置文件中的启动选项被划分为若干个组，每个组有一个组名，用中括号[] 扩起来，像这样：
1 2 3 4 5 6 7 8 9 10 11 12  [server] (具体的启动选项...) [mysqld] (具体的启动选项...) [mysqld_safe] (具体的启动选项...) [client] (具体的启动选项...) [mysql] (具体的启动选项...) [mysqladmin] (具体的启动选项...)   优先级 1.配置文件的优先级
1  如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准   同一个配置文件中多个组的优先级  1  将以最后一个出现的组中的启动选项为准   系统变量 ​	概念：MySQL 服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为 MySQL 系统变量
​	每个系统变量都有一个默认值，我们可以使用命令行或者配置文件中的选项在启动服务器时改变一些系统变量的值。大多数的系统变量的值也可以在程序运行过程中修改，而无需停止并重新启动它。
设置 通过命令行添加启动选项。比方说我们在启动服务器程序时用这个命令：
1  mysqld --default-storage-engine=MyISAM --max-connections=10   通过配置文件添加启动选项。我们可以这样填写配置文件：</description>
    </item>
    
    <item>
      <title>Oracle安装</title>
      <link>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/oracle%E5%AE%89%E8%A3%85/</guid>
      <description>oracle的 部署步骤 下载地址:  http://192.168.30.65:8080/share.cgi?ssid=04ojgsE  导入镜像   1  docker load &amp;lt; oracle_1.tar     查看是否倒入成功   1  docker images | grep oracle     启动命令   1  docker container run --restart=always --name oracle -p 31521:1521 -e DBCA_TOTAL_MEMORY=1024 -v /docker/software/oracle/ora:/u01/app/oracle/ -d registory.dongshanxia.top:35000/docker/oracle:1.0     docker-compose 文件
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  version: &amp;#34;3&amp;#34; services: oracle: image: registory.</description>
    </item>
    
    <item>
      <title>Pgsql安装</title>
      <link>http://127.0.0.1:1313/hugo/install/pgsql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/pgsql%E5%AE%89%E8%A3%85/</guid>
      <description>centos7.8安装pgsql13 PgSql的安装 1.配置repo 1 2 3 4 5 6 7 8 9  cd /etc/yum.repos.d vim pgsql.repo ## 以下为内容 [postgresql] name=postgresql baseurl=https://mirrors.tuna.tsinghua.edu.cn/postgresql/repos/yum/13/redhat/rhel-7.8-$basearch/ enabled=1 gpgcheck=0 ## 以上为内容   2.安装pgsql 1 2 3  ## 安装pgsql yum install postgresql13 -y yum install postgresql13-server -y   3.初始化pgsql 1  /usr/pgsql-13/bin/postgresql-13-setup initdb   4.设置自动启动并且启动postgresql服务 1 2  systemctl enable postgresql-13 systemctl start postgresql-13   创建用户和数据库  切换用户  1  su - postgres    进入pgsql 控制台  1  psql    进行配置  1 2 3 4  createuserdong_userwithpassword&amp;#39;dong_passwd&amp;#39;;//创建用户createdatabasedong_dbownerdong_user;//创建数据库grantallprivilegesondatabasedong_dbtodong_user;//授权ALTERROLEdong_userWITHCREATEDB;//修改用户有创建数据库的权限   推出  1  \q  修改配置文件  文件: /var/lib/pgsql/13/data/postgresql.</description>
    </item>
    
    <item>
      <title>Pve崩溃</title>
      <link>http://127.0.0.1:1313/hugo/linux/pve/pve%E5%B4%A9%E6%BA%83/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/pve/pve%E5%B4%A9%E6%BA%83/</guid>
      <description>pve 故障 1.pve 集群崩溃  cluster not ready - no quorum? (500)  1、隔离节点上停止 pve-cluster 服务 1 2  systemctl stop pve-cluster.service systemctl stop corosync.service   2、上一步执行成功后，执行将待隔离节点的集群文件系统设置为本地模式的命令 1  pmxcfs -l   3、上一步执行成功后，执行删除 corosync 配置文件的命令 1 2  rm /etc/pve/corosync.conf rm -rf /etc/corosync/*   4、前3步都执行成功后，执行重新启动集群文件系统服务的命令 1 2  killall pmxcfs systemctl start pve-cluster.service   5、删除故障节点node文件 1 2 3  cd /etc/pve/nodes ls rm -rf /etc/pve/nodes/pvepc #改成故障节点对应路径   </description>
    </item>
    
    <item>
      <title>Redis单机版搭建</title>
      <link>http://127.0.0.1:1313/hugo/install/redis%E5%8D%95%E6%9C%BA%E7%89%88%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/redis%E5%8D%95%E6%9C%BA%E7%89%88%E6%90%AD%E5%BB%BA/</guid>
      <description>redis单机版搭建 安装环境  redis版本redis-5.0.7 虚拟机系统centos7.4 用户 root 下载地址 http://download.redis.io/releases/  安装步骤   进入安装目录
 cd /usr/local/redis (编译目录)    下载redis并解压到指定目录
  wget http://download.redis.io/releases/redis-5.0.7.tar.gz
  tar zxvf redis-5.0.7.tar.gz
  cd redis-5.0.7/
    编译安装redis
 cd /usr/local/redis/redis-5.0.7 make make install    修改redis.conf配置文件
 vim redis.conf  1 2 3  daemonize no --&amp;gt; daemonize yes bind 127.0.0.1 --&amp;gt; # bind 127.0.0.1 requirepass 123 指定密码123     复制几个配置文件</description>
    </item>
    
    <item>
      <title>Redis安装问题</title>
      <link>http://127.0.0.1:1313/hugo/install/redis%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/redis%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</guid>
      <description>title: redis安装可能遇到的错误 date: 2020-10-29 18:05:52 permalink: /pages/1b76b7/ categories:
 database redis tags:    redis安装可能遇到的错误 redis安装过程中执行gem install redis-3.0.0 报错 ##【Redis】ERROR: Could not find a valid gem &amp;lsquo;redis-3.0.0&amp;rsquo; (&amp;gt;= 0) in any repository
1 2 3 4 5  1.由于gem没有包含自身携带的源，所以需要下载gem源 2.http://rubygems.org是gem本身带的源 3.如果需要国内源，可以卸载自身携带的，安装国内源 4.查看是否存在http://rubygems.org gem source   1 2 3 4 5  表示没有gem源 5.安装http://rubygems.org gem sources -a https://rubygems.org 6. 重新安装redis-3.0.0.gem gem install redis   1  7. 安装完成   参考网址</description>
    </item>
    
    <item>
      <title>Redis集群搭建</title>
      <link>http://127.0.0.1:1313/hugo/install/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>redis集群搭建 安装环境  redis版本redis-3.0.7 虚拟机系统centos7.4 用户 root 三台服务器：  192.168.200.128 192.168.200.129 192.168.200.130 每台服务器redis三个端口号 7000～7002    安装步骤  第一步：在三台服务器上分别安装单机版redis,安装过程见单机版reids搭建 第二步：安装ruby  yum install ruby 出现【y/n】,选y   第三步：安装rubygems组件  yum install rubygems 出现【y/n】,选y   第四步：安装ruby脚本运行使用的包  [root@redis redis-cluster]# gem install redis &amp;ndash;version 3.0.7    1 2 3 4 5 6  安装成功会出现如下提示: Successfully installed redis-3.0.7 1 gem installed Installing ri documentation for redis-3.0.7… Installing RDoc documentation for redis-3.</description>
    </item>
    
    <item>
      <title>redo日志（上）</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/20.redo%E6%97%A5%E5%BF%97%E4%B8%8A/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/20.redo%E6%97%A5%E5%BF%97%E4%B8%8A/</guid>
      <description>redo日志 **作用：**记录下记录修改的信息（所在表空间，页号，修改信息），系统崩溃了的话，也可以利用redo日志恢复。
**过程：**该事务执行过程中产生的 redo 日志刷新到磁盘。
通用组成：
 type ：该条 redo 日志的类型。在 MySQL 5.7.21 这个版本中，设计 InnoDB 的大叔一共为 redo 日志设计了53种不同的类型，稍后会详细介绍不同类型的 redo 日志。 space ID ：表空间ID。 page number ：页号。 data ：该条 redo 日志的具体内容。  类型：根据记录修改的字节（type字段长度）大小分类
 MLOG_1BYTE （ type 字段对应的十进制数字为 1 ）：表示在页面的某个偏移量处写入1个字节的 redo 日志类型。 MLOG_2BYTE （ type 字段对应的十进制数字为 2 ）：表示在页面的某个偏移量处写入2个字节的 redo 日志类型。 MLOG_4BYTE （ type 字段对应的十进制数字为 4 ）：表示在页面的某个偏移量处写入4个字节的 redo 日志类型。 MLOG_8BYTE （ type 字段对应的十进制数字为 8 ）：表示在页面的某个偏移量处写入8个字节的 redo 日志类型。 MLOG_WRITE_STRING （ type 字段对应的十进制数字为 30 ）：表示在页面的某个偏移量处写入一串数据。  复杂 redo 日志类型 如果数据频繁的改动，那是不是对应的redo log也要跟着增加呢，这样岂不是和保存的数据是一个道理了，占用着和她差不多的空间，为了减少空间的消耗，提出了复杂 redo 日志类型。</description>
    </item>
    
    <item>
      <title>redo日志（下）</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/21.redo%E6%97%A5%E5%BF%97%E4%B8%8B/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/21.redo%E6%97%A5%E5%BF%97%E4%B8%8B/</guid>
      <description>redo log的刷盘时机  log buffer 空间不足时（大概一半左右） 事务提交时 后台线程不停的刷刷刷（大概每秒刷一次） 正常关闭服务器时 做所谓的 checkpoint  redo日志文件组 磁盘上的 redo 日志文件不只一个，而是以一个 日志文件组 的形式出现的
MySQL 的数据目录（使用 SHOW VARIABLES LIKE &amp;lsquo;datadir&amp;rsquo; 查看）下默认有两个名为 ib_logfile0 和ib_logfile1的文件， log buffer 中的日志默认情况下就是刷新到这两个磁盘文件中。如果我们对默认的redo 日志文件不满意，可以通过下边几个启动参数来调节：
innodb_log_group_home_dir
该参数指定了 redo 日志文件所在的目录，默认值就是当前的数据目录。
innodb_log_file_size
该参数指定了每个 redo 日志文件的大小，在 MySQL 5.7.21 这个版本中的默认值为 48MB
innodb_log_files_in_group
该参数指定 redo 日志文件的个数，默认值为2，最大值为100。
总共的 redo 日志文件大小其实就是： innodb_log_file_size × innodb_log_files_in_group 。
redo日志文件格式 我们前边说过 log buffer 本质上是一片连续的内存空间，被划分成了若干个 512 字节大小的 block 。将logbuffer中的redo日志刷新到磁盘的本质就是把block的镜像写入日志文件中，所以 redo 日志文件其实也是由若干个 512 字节大小的block组成。redo 日志文件组中的每个文件大小都一样，格式也一样，都是由两部分组成：
 前2048个字节，也就是前4个block是用来存储一些管理信息的。 从第2048字节往后是用来存储 log buffer 中的block镜像的。   所以每次一开始写都是重ib_logfile的2048字节处开始写</description>
    </item>
    
    <item>
      <title>SkyWalking搭建(一)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>基于 docker 部署 skywalking 并实现 SpringBoot 全链路监控 [toc]
一、安装环境部署 下载镜像：
1 2 3  $ docker pull docker pull elasticsearch:7.10.1 $ docker pull apache/skywalking-oap-server:8.3.0-es7 $ docker pull apache/skywalking-ui:8.3.0   1.1 Docker 中安装 Elasticsearch7.6.2（方式一） 安装 Elasticsearch
注意：使用版本为 7.6.2，你可以选择其他版本 拉取镜像
1  docker pull elasticsearch:7.6.2   启动容器
1 2 3  docker run --restart=always -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; \ -e ES_JAVA_OPTS=&amp;#34;-Xms512m -Xmx512m&amp;#34; \ --name=&amp;#39;elasticsearch&amp;#39; --cpuset-cpus=&amp;#34;1&amp;#34; -m 2G -d elasticsearch:7.</description>
    </item>
    
    <item>
      <title>SkyWalking搭配springboot应用(三)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E6%90%AD%E9%85%8Dspringboot%E5%BA%94%E7%94%A8%E4%B8%89/</guid>
      <description>上传springboot的jar包 1  cd /opt/jar   修改agent配置 1 2 3 4 5 6 7  cd /opt/software/skywalking/apache-skywalking-apm-bin mkdir /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot cp /opt/software/skywalking/apache-skywalking-apm-bin/agent/* /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot # 修改应用名称 vim /opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/config/agent.config   启动应用 1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SkyWalking监控mysql(四)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E7%9B%91%E6%8E%A7mysql%E5%9B%9B/</guid>
      <description>  准备以mysql为数据库的springboot应用
  上传jar到指定目录
  使用java-agent启动springboot应用
1  java -javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent-mysql-boot/skywalking-agent.jar -jar /opt/jar/mysql-boot.jar      可以在ui服务上看到，从用户请求到mysql的过程，还可以看到执行了什么sql,方便查找问题
  </description>
    </item>
    
    <item>
      <title>SkyWalking配合tomcat使用(二)</title>
      <link>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/skywalking/skywalking%E9%85%8D%E5%90%88tomcat%E4%BD%BF%E7%94%A8%E4%BA%8C/</guid>
      <description>上传tomcat至服务器 1 2  #下载tomcat8 https://tomcat.apache.org/download-80.cgi   修改tomcat配置 1 2 3 4  # 端口修改8081 vim /opt/software/apache-tomcat-8.5.68/conf/server.xml # 修改tomcat启动方式 在加catalina.sh最上面！ CATALINA_OPTS=&amp;#34;$CATALINA_OPTS-javaagent:/opt/software/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar&amp;#34;; export CATALINA_OPTS   上传springMvc的war包 1  cd /opt/software/apache-tomcat-8.5.68/webapps/   启动tomcat 1  ./opt/software/apache-tomcat-8.5.68/bin/startup.sh    请求一下项目 sky-walking-ui就有记录了！
 </description>
    </item>
    
    <item>
      <title>SpringCloud &#43; SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题</title>
      <link>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/get%E8%AF%B7%E6%B1%82%E6%97%A0%E6%B3%95%E4%BC%A0%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>SpringCloud + SpringGateway 解决Get请求传参为特殊字符导致400无法通过网关转发的问题 场景: 公司以前的框架统一使用Post请求，传入参数为一个定义的公共类，类里面有个String类型的bean字段传入json字符串作为传参，emmm就想给他改成restful风格，在传入参数公共类无法改变的情况下，Get请求会传入特殊字符，导致400错误。例如：
1  localhost:10001/verify/compreport/month?data={&amp;#34;compRefOwid&amp;#34;:&amp;#34;1448487922485252098&amp;#34;, &amp;#34;yhMonth&amp;#34;:&amp;#34;2021-10&amp;#34;}   原因： Tomcat的新版本中增加了一个新特性，就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp;amp; = + $ , / ? # [ ])。
解决方案选择：  前端请求时encode特殊字段(算了，不能因为自己的原因加大前端工作量) 改用post请求(emmm没有办法的办法,看着难受就是想要改了) 改Tomcat配置文件(由于是springboot项目，内嵌了tomcat，不方便修改，好吧就是我比较菜) 在后端代码层面解决这个问题  解决方法： 其他服务：由于使用的是内嵌的tomcat，网上常见的 解决spring boot请求包含非法字符问题 The valid characters are defined in RFC 7230 and RFC 3986 错误 配置TomcatServletWebServerFactory的方式使用时会导致两个TomcatServletWebServerFactory使springboot项目报错Unable to start ServletWebServerApplicationContext due to multiple ServletWebServerFactory beans而无法启动。而使用yml配置的方式也无法生效。
1 2 3 4 5 6 7 8 9  server:tomcat:relaxed-query-chars:- &amp;#34;&amp;lt;&amp;#34;- &amp;#34;&amp;gt;&amp;#34;- &amp;#34;[&amp;#34;- &amp;#34;]&amp;#34;- &amp;#34;{&amp;#34;- &amp;#34;}&amp;#34;  随后参考了继承WebServerFactoryCustomizer的方式来修改Tomcat配置</description>
    </item>
    
    <item>
      <title>Tomcat自检程序</title>
      <link>http://127.0.0.1:1313/hugo/linux/shell/tomcat%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/shell/tomcat%E8%87%AA%E6%A3%80%E7%A8%8B%E5%BA%8F/</guid>
      <description>tomcat自检 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  #!/bin/bash PROC_NAME=Bootstrap PROC_PATH=/home/test/tomcat/apache-tomcat-7.0.70/bin PROC_START_SH_PATH=/home/test/tomcat/apache-tomcat-7.0.70/bin PROC_START_SH_NAME=startup.sh LOG_FILE=/home/cjpt/test/logs/process_check.log FAIL_LOG_FILE=/home/test/tomcat/logs/process_check_fail.log WEB_URL=&amp;#34;URL:&amp;#34; PROC_ROOT_PATH=/home/test/tomcat/apache-tomcat-7.0.70/ JAVA_HOME_MY=/home/test/jdk/jdk1.8 JRE_HOME_MY=/home/test/jdk/jdk1.8/jre DATE=/bin/date function check(){ HTTP_CODE=$(curl -G -m 10 -o /dev/null -s -w %{http_code} $WEB_URL) echo &amp;#34;http response code:$HTTP_CODE&amp;#34; &amp;gt;&amp;gt;$LOG_FILE if [ $HTTP_CODE -eq 200 ] ; then $DATE +&amp;#34;%F %T %a&amp;#34; #&amp;gt;&amp;gt;$LOG_FILE echo &amp;#34;http response code:$HTTP_CODE&amp;#34; #&amp;gt;&amp;gt;$LOG_FILE else $DATE +&amp;#34;%F %T %a&amp;#34; #&amp;gt;&amp;gt;$FAIL_LOG_FILE echo &amp;#34;http response code:$HTTP_CODE&amp;#34; #&amp;gt;&amp;gt;$FAIL_LOG_FILE return 1 fi } n=5 for ((i=n;i&amp;gt;=1;i--)) do check result=$?</description>
    </item>
    
    <item>
      <title>Vmware安装</title>
      <link>http://127.0.0.1:1313/hugo/install/vmware%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/vmware%E5%AE%89%E8%A3%85/</guid>
      <description>linux安装VMware Workstation16 1.安装包  VMware-Workstation-Full-16.2.1-18811642.x86_64 下载地址  2.密钥  　ZF3R0-FHED2-M80TY-8QYGC-NPKYF +　YF390-0HF8P-M81RQ-2DXQE-M2UT6 +　ZF71R-DMX85-08DQY-8YMNC-PPHV8 如果不行 自行百度  3.赋予权限  chmod 777 VMware-Workstation-Full-16.2.1-18811642.x86_64.bundle  4.开始安装  sudo ./VMware-Workstation-Full-16.2.1-18811642.x86_64.bundle  5.后续安装  安装界面 跟windows的差不多 类似 (后续补充)  </description>
    </item>
    
    <item>
      <title>Vue杂</title>
      <link>http://127.0.0.1:1313/hugo/vue/vue%E6%9D%82/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/vue/vue%E6%9D%82/</guid>
      <description>Vue的学习  ##命令
 vue ui 打开脚手架的ui界面 Vue create 项目名字   Please pick a preset: 选择方式
     default 默认安装
      自定义安装
      自定义解释
     babel：一个javascript转译器，将最新版的js语法（es6、es7）转换为现阶段浏览器可以兼容的js代码
      typescript：作用有些类似于babel，拥有类型检查能力和面向对象新特征。
      PWA：渐进式WEB应用
      Router：路由，设置url，使不同的url显示不同的页面
      Vuex：作用类似于全局对象，但是并不完全相同。</description>
    </item>
    
    <item>
      <title>Vue路由</title>
      <link>http://127.0.0.1:1313/hugo/vue/vue%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/vue/vue%E8%B7%AF%E7%94%B1/</guid>
      <description>一.路由的引入  下载一下就可以了 全局引入 router Vue.use(Router) Vue.use(Router) // Vue全局使用Router   二、路由的配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  import Vue from &amp;#39;vue&amp;#39; // 引入vue import Router from &amp;#39;vue-router&amp;#39; // 引入vue-router import Home from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Windows杂</title>
      <link>http://127.0.0.1:1313/hugo/windows/windows%E6%9D%82/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/windows/windows%E6%9D%82/</guid>
      <description>关于进入的win10 安全模式的文章 1.开始的
在登陆界面，按组合键：Shift+重启 进入选择一个选项，选择【疑难解答】
2.选择【高级选项】。
3.选择【启动设置】。
4.点击重启
进入安全模式
windows 命令 route命令  route delete  route delete 0.0.0.0 删除这个 目标网络（网络目标）   route print  打印你的 网络路由   route add [目标网络] mask [子网掩码] 本地网关(本地ip)  route add 13.8.135.0 mask 255.255.255.0 13.8.135.1 通过13.8.135.1 访问 13.8.135.0 这个网络    网络重置  netsh int ipv4 reset 记得重启  收集 历史命令 记录  doskey /HISTORY &amp;gt; F:\Users\Public\User.txt  bat 相关命令总结 call 命令 （其他命令 不退出命令）  其他命令可以 输出后 不退出 例子:vuepress build docs 例子:npm install  相关例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  @echo off :main ::pause 10 timeout /t 60 for /F %%d IN (&amp;#39;git rev-parse HEAD&amp;#39;) do ( set oldCommitid=%%d ) echo oldCommitid=%oldCommitid% git pull for /F %%i in (&amp;#39;git rev-parse HEAD&amp;#39;) do ( set newCommitid=%%i ) echo newCommitid=%newCommitid% if %oldCommitid%==%newCommitid% ( ECHO TRUE ECHO TRUE ECHO TRUE	echo &amp;#39;kaishi2&amp;#39; )else ( echo &amp;#39;false&amp;#39; goto sourceTrue ) echo &amp;#39;kaishi&amp;#39; goto main :sourceTrue echo &amp;#39;kaishi3&amp;#39; del/s/q F:\Users\Public\ourdoc\docs\.</description>
    </item>
    
    <item>
      <title>yum命令</title>
      <link>http://127.0.0.1:1313/hugo/linux/yum/yum%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/yum/yum%E5%91%BD%E4%BB%A4/</guid>
      <description>yum 命令 yum相关例子 一、只下载不安装  yum install &amp;ndash;downloadonly &amp;ndash;downloaddir=/soft/mysql mysql-community-server 只是下载 不安装  二、删除的例子  yum remove package1 删除程序包package1 yum groupremove group1 删除程序组group1 yum deplist package1 查看程序package1依赖情况  三、查找的粒子  yum info package1 显示安装包信息package1 yum list 显示所有已经安装和可以安装的程序包 yum list package12 显示指定程序包安装情况package12 yum groupinfo group1 显示程序组group1信息yum search string 根据关键字string查找安装包  四、安装的例子  yum install 全部安装 yum install package1 安装指定的安装包package1 yum groupinsall group1 安装程序组group1  五、更新和升级  yum update 全部更新 yum update package1 更新指定程序包package1 yum check-update 检查可更新的程序 yum upgrade package1 升级指定程序包package1 yum groupupdate group1 升级程序组group1  六、清楚缓存  yum clean packages 清除缓存目录下的软件包 yum clean headers 清除缓存目录下的 headers yum clean oldheaders 清除缓存目录下旧的 headers yum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers  </description>
    </item>
    
    <item>
      <title>中设天合</title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E4%B8%AD%E8%AE%BE%E5%A4%A9%E5%90%88/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E4%B8%AD%E8%AE%BE%E5%A4%A9%E5%90%88/</guid>
      <description> redis用到的场景 为什么要用redis redis重启后缓存数据怎么办 redis的持久化 左连接、右连接、外连接、内连接的区别 spring事务的作用 spring的注解有哪些 springMVC简单实现原理 JVM中会内存泄漏吗，为什么会出现这样的情况  </description>
    </item>
    
    <item>
      <title>使用本地源</title>
      <link>http://127.0.0.1:1313/hugo/linux/yum/%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%BA%90/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/yum/%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%BA%90/</guid>
      <description>使用本地源 使用 createrepo 制作的本地源  上传压缩包到/ 根目录 解压安装包  tar -zxvf /soft.tar.gz -C /   备份原来的配置  创建备份位置 mkdir /etc/yum.repos.d/bak 备份原来源 cp /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak   删除原来的yum源 （有网可以跳过）  rm -rf /etc/yum.repos.d/*.repo   创建文件  touch /etc/yum.repos.d/test.repo   文件里写入内容 1 2 3 4 5  [local-yum] name=local-yum baseurl=file:///soft enabled=1 gpgcheck=0    清除原先的yum缓存  yum clean all   缓存yum  yum makecache   缓存可以了，此本地源可以在无网条件下使用  脚本的sh</description>
    </item>
    
    <item>
      <title>华为客户端安装</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E5%8D%8E%E4%B8%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E5%8D%8E%E4%B8%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85/</guid>
      <description>华为客户端安装 安装环境   服务器 13.8.133.247 普通用户 htga   1. 登录https://13.104.24.70:28443/web/下载客户端压缩包 2. 点击服务管理，进入如下界面 3. 点击下载客户端 4. 创建目录 resource   cd /home/htga/ (进入htga目录) mkdir resource (创建resource目录) cd resource (进入resource目录)   5.将压缩包FusionInsight_Services_Client.tar上传到rsource目录下 6.解压 FusionInsight_Services_Client.tar   tar -xvf FusionInsight_Services_Client.tar   7.校验软件包   sha256sum -c FusionInsight_Services_ClientConfig.tar.sha256 提示FusionInsight_Services_ClientConfig.tar: OK说明校验成功   8.解压的安装文件FusionInsight_Services_ClientConfig.tar   tar -xvf FusionInsight_Services_ClientConfig.tar   9.配置客户端网络连接   cd /home/htga/resource/FusionInsight_Services_ClientConfig/ (进入FusionInsight_Services_ClientConfig) vim hosts 复制hosts下的ip地址 su - root (切换到root账户) vim /etc/hosts （打开hosts文件） 按I进入编辑模式，把刚才复制的ip地址给粘贴到这个文件中，按esc退出编辑模式，保存退出 su - htga（切回到htga账户）   10.</description>
    </item>
    
    <item>
      <title>字符集和比较规则</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/11.%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/11.%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</guid>
      <description>字符集和比较规则 字符集简介 作用：为了让数据在人和计算机都能被”看的懂“。
 我们知道在计算机中只能存储二进制数据，那该怎么存储字符串呢？当然是建立字符与二进制数据的映射关系了，建立这个关系最起码要搞清楚两件事儿：
 你要把哪些字符映射成二进制数据？ 也就是界定清楚字符范围。 怎么映射？ 将一个字符映射成一个二进制数据的过程也叫做 编码 ，将一个二进制数据映射到一个字符的过程叫做 解码 。 人们抽象出一个 字符集 的概念来描述某个字符范围的编码规则。比方说我们来自定义一个名称为 xiaohaizi 的字符集，它包含的字符范围和编码规则如下： 包含字符 &amp;lsquo;a&amp;rsquo; 、 &amp;lsquo;b&amp;rsquo; 、 &amp;lsquo;A&amp;rsquo; 、 &amp;lsquo;B&amp;rsquo; 。 编码规则如下： 采用1个字节编码一个字符的形式，字符和字节的映射关系如下： &amp;lsquo;a&amp;rsquo; -&amp;gt; 00000001 (十六进制：0x01) &amp;lsquo;b&amp;rsquo; -&amp;gt; 00000010 (十六进制：0x02) &amp;lsquo;A&amp;rsquo; -&amp;gt; 00000011 (十六进制：0x03) &amp;lsquo;B&amp;rsquo; -&amp;gt; 00000100 (十六进制：0x04) 有了 xiaohaizi 字符集，我们就可以用二进制形式表示一些字符串了，下边是一些字符串用 xiaohaizi 字符集编码后的二进制表示： &amp;lsquo;bA&amp;rsquo; -&amp;gt; 0000001000000011 (十六进制：0x0203) &amp;lsquo;baB&amp;rsquo; -&amp;gt; 000000100000000100000100 (十六进制：0x020104) &amp;lsquo;cd&amp;rsquo; -&amp;gt; 无法表示，字符集xiaohaizi不包含字符&amp;rsquo;c&amp;rsquo;和&amp;rsquo;d&#39;  —— 引用《MySQL是怎么运行的》
 比较规则简介  将两个大小写不同的字符全都转为大写或者小写。 再比较这两个字符对应的二进制数据。  注意：同一种字符集可以有多种比较规则</description>
    </item>
    
    <item>
      <title>安装es</title>
      <link>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85es/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85es/</guid>
      <description>警告  es 最好不要 7.10.2 之后的版本 推荐用opensearch-1.1.0  硬件服务器  10.168.2.87 10.168.2.88 10.168.2.89  1.环境准备 (每台都需要做) 1.1创建用户(root用户操作)  useradd top  1.2 修改用户密码(root用户操作)  passwd top  1.3 赋予用户sudo权限(root用户操作)   修改命令
1 2 3 4  chmod -v u+w /etc/sudoers sed -i &amp;#39;s#.*top.*##g&amp;#39; /etc/sudoers sed -i &amp;#39;s#root.*ALL=(ALL).*ALL#root ALL=(ALL) ALL \ntop ALL=(ALL) ALL#g&amp;#39; /etc/sudoers chmod -v u-w /etc/sudoers     1.4 安全limits文件限制   修改文件
1  vim /etc/security/limits.</description>
    </item>
    
    <item>
      <title>安装opensearch</title>
      <link>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85opensearch/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/%E5%AE%89%E8%A3%85opensearch/</guid>
      <description>说明  基于Elasticsearch7.10.2 的 opensearch-1.1.0  硬件服务器  10.168.2.87 10.168.2.88 10.168.2.89  1.环境准备 (每台都需要做) 1.1创建用户(root用户操作)  useradd top  1.2 修改用户密码(root用户操作)  passwd top  1.3 赋予用户sudo权限(root用户操作)   修改命令
1 2 3 4  chmod -v u+w /etc/sudoers sed -i &amp;#39;s#.*top.*##g&amp;#39; /etc/sudoers sed -i &amp;#39;s#root.*ALL=(ALL).*ALL#root ALL=(ALL) ALL \ntop ALL=(ALL) ALL#g&amp;#39; /etc/sudoers chmod -v u-w /etc/sudoers     1.4 安全limits文件限制   修改文件
1  vim /etc/security/limits.conf     增加的内容</description>
    </item>
    
    <item>
      <title>定制化iso</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E5%AE%9A%E5%88%B6%E5%8C%96iso/</guid>
      <description>定制化iso 1、准备环境 1.1 安装需要的包 1  yum install createrepo mkisofs isomd5sum squashfs-tools   1.2 创建需要的目录 1 2  mkdir /opt/centos mkdir /opt/old   1.3 上传基础安装包 1 2  网上下载：CentOS-7-x86_64-Minimal-1708.iso 上传到 /opt/   1.4 挂载 1  mount /opt/CentOS-7-x86_64-Minimal-1708.iso /opt/old/   1.5 复制相关文件 1 2 3 4 5  cp -r /opt/old/* /opt/centos/ cp /opt/old/.discinfo /opt/centos/ cp /opt/old/.treeinfo /opt/centos/ cp /root/anaconda-ks.cfg /opt/centos/isolinux/base-ks.cfg chmod +w /opt/centos/isolinux/base-ks.cfg   1.</description>
    </item>
    
    <item>
      <title>微信公众号</title>
      <link>http://127.0.0.1:1313/hugo/software/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</guid>
      <description>公众号发布文章 [toc]
1. 登陆公众号网站  地址：https://mp.weixin.qq.com/ 扫描二维码   登陆后的地址为  2. 编写公众号发布内容  点击素材管理   点击新建图文信息   正式编写   编写完内容   保存之前 为这边文章添加封面   点击 保存并且群发  谢谢 </description>
    </item>
    
    <item>
      <title>更换yum仓库</title>
      <link>http://127.0.0.1:1313/hugo/linux/yum/%E6%9B%B4%E6%8D%A2yum%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/yum/%E6%9B%B4%E6%8D%A2yum%E4%BB%93%E5%BA%93/</guid>
      <description>修改CentOS默认yum源为国内yum镜像源 (163的) centos7的一些镜像源
修改步骤  备份原来的yum  mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup   进入yum源配置文件所在的文件夹  cd /etc/yum.repos.d/   下载国内镜像源配置文件  wget http://mirrors.163.com/.help/CentOS7-Base-163.repo   运行yum makecache生成缓存  yum makecache    一些 repo的说明  目录地址： /etc/yum.repos.d/ 里面是原来源 可以删除 相关内容字段说明  1 2 3 4 5 6 7 8 9 10 11 12  [local-yum] name=local-yum baseurl=file:///home/test/local-yum/ enabled=1 gpgcheck=0 [....] 代表这个库的名字，必须是唯一的，不可以重复。 name＝ 是这个库的说明，没有太大的实际意义，只是一个字段说明。 baseurl＝ 说明采取什么方式传输，具体路径在哪里，可以使用的方式有,file:///，ftp://，http://等 enabled=1 说明启用这个更新库，0表示不启用。 gpgcheck=1 表示使用gpg文件来检查软件包的签名 gpgkey= 表示gpg文件所存放的位置，此处也可以有http方式的位置。   </description>
    </item>
    
    <item>
      <title>本地源制作</title>
      <link>http://127.0.0.1:1313/hugo/linux/yum/%E6%9C%AC%E5%9C%B0%E6%BA%90%E5%88%B6%E4%BD%9C/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/yum/%E6%9C%AC%E5%9C%B0%E6%BA%90%E5%88%B6%E4%BD%9C/</guid>
      <description>制作本地源 通过 createrepo 制作本地源 + 前提 : 前提制作本地源的机器可以安装 这个软件 例如 下载nginx的时候 自己加上 nginx的yum的数据源 （rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm）   下载安装 createrepo  yum -y install createrepo   下载需要的yum源  yumdownloader &amp;ndash;resolve &amp;ndash;destdir /soft/mysql mysql-community-server 只是下载 不安装 下载的目录为/soft/mysql 下载的软件 mysql yum install &amp;ndash;downloadonly &amp;ndash;downloaddir=/soft/httpd httpd 只是下载 不安装 下载的目录为/soft/nginx 下载的软件 nginx   为下载的rpm 制作 索引  createrepo /soft 给 /soft 文件夹 内 rpm包建立索引 createrepo &amp;ndash;update /soft 给 /soft 文件夹 内 rpm包 更新索引   压缩 建立好索引的文件  tar -zcvf soft.</description>
    </item>
    
    <item>
      <title>杭州健景</title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E5%81%A5%E6%99%AF/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E5%81%A5%E6%99%AF/</guid>
      <description> String为什么不可变更 String底层使用什么数据结构 ArrayList和LinkList的区别 HashTable为什么线程安全 HashMap用了什么数据结构 HashMap什么情况下变成红黑树的结构 线程池的核心参数 线程池的几种拒绝策略 线程池有哪几种 synchronized锁升级 单例模式应用场所 Lock锁 ReentrantLock JVM Spirng的IOC和AOP IOC的底层原理 AOP的使用场景 Spring怎么配置事务 为什么要开启事务 Spring事务的失效场景 Mysql的慢查询 如何查询mysql是否用到索引 索引下推 B+树 索引数据存在B+树的哪里 事务的四种隔离级别 事务的隔离级别能避免什么 redis缓存淘汰策略 redis的持久化 MQ ThreadLocal SpringMVC运行流程 线程安全的ArrayList是哪个  </description>
    </item>
    
    <item>
      <title>杭州微宏</title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E5%BE%AE%E5%AE%8F/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E5%BE%AE%E5%AE%8F/</guid>
      <description>openFeign的主要作用
基于http请求，通过负载均衡获取其他服务的ip和端口执行接口
  SpringCould中的重要组件
注册中心、配置中心、网关、熔断器
  mysql索引
分为主键索引、二级索引……
  B+树的优势
  建索引考虑哪些方面
索引区分度，索引失效的问题，不建冗余的索引，考虑业务是否需要频繁新增修改而查询较少的情况下不建索引
  虽然走了索引但是还是很慢
索引区分度低，相同数据太多
  数据量小为什么要分成多个服务
  微服务和单体应用如何选择
  excel导入导出数据量比较大的话怎么考虑设计
考虑内存，做成分段上传下载
  synchronized 和 ReentrantLock 的区别
两者的共同点：
 都是用来协调多线程对共享对象、变量的访问 都是可重入锁，同一线程可以多次获得同一个锁 都保证了可见性和互斥性  两者的不同点：
1. ReentrantLock 显式的获得、释放锁，synchronized 隐式获得释放锁 2. ReentrantLock 可响应中断、可轮回，synchronized 是不可以响应中断的，为处理锁的 不可用性提供了更高的灵活性 3. ReentrantLock 是 API 级别的，synchronized 是 JVM 级别的 4. ReentrantLock 可以实现公平锁 5. ReentrantLock 通过 Condition 可以绑定多个条件 6.</description>
    </item>
    
    <item>
      <title>杭州重构</title>
      <link>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E9%87%8D%E6%9E%84/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/%E6%9D%AD%E5%B7%9E%E9%87%8D%E6%9E%84/</guid>
      <description>  springboot配置多数据源
springboot自带，spring.datasource.数据源名称
  springboot默认线程数
springboot本身没有线程数，但是内嵌了tomcat，tomcat默认线程数默认为200
  mybatis是否尝试过配置xml语言转义
  如何查询时指定某一索引
force index()
  springboot和spring的区别
Spring Boot基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的复杂例行配置。
它的目标和Spring的目标是一致的，为更快，更高效的开发生态系统铺平了道路。以下是Spring Boot中的一些功能：
通过starter这一个依赖，以简化构建和复杂的应用程序配置。 可以直接main函数启动，嵌入式web服务器，避免了应用程序部署的复杂性，Metrics度量，Helth check健康检查和外部化配置。 尽可能的自动化配置Spring功能。
  支持springboot自动配置的关键类是哪些
@SpringBootConfiguration：标记当前类为配置类 @EnableAutoConfiguration：开启自动配置
  之前用docker镜像里跑的是什么(jar还是war)
jar
  ⽤户⽤⼿机号登录的时候，通常需要发送验证码，怎么防⽌⽤户恶意地重复发送验证码
  并发同时请求下载excel报表，怎么处理规划设计
  怎么查出经销商所有的子经销商(回答递归深搜说效率太慢，除了递归还有别的做法没)
  大量update语句怎么优化，大量insert怎么优化
  大量update、insert语句分开运行和合并在一起运行有什么区别
  字节流和字符流的区别
  </description>
    </item>
    
    <item>
      <title>离线安装mysql</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85mysql/</guid>
      <description>离线安装mysql
1.查看是否安装
1 2  rpm -qa | grep mariadb rpm -qa | grep mysql   2.如果已安装则卸载rpm
rpm -e &amp;ndash;nodeps
&amp;ndash;nodeps:由于安装包的依赖问题，需要强制删除
3.下载rpm包
   rpm包     mysql-community-client   mysql-community-devel   mysql-community-libs   mysql-community-server   mysql-community-libs   mysql-community-common    4.将rpm包通过xftp等方式放入linux服务器
5.根据rpm安装
到rpm包目录下使用命令
1  rpm -ivh --force mysql-community-common-5.7.24-1.el7.x86_64.rpm mysql-community-libs-5.7.24-1.el7.x86_64.rpm mysql-community-client-5.7.24-1.el7.x86_64.rpm mysql-community-server-5.7.24-1.el7.x86_64.rpm mysql-community-devel-5.7.24-1.el7.x86_64.rpm mysql-community-libs-compat-5.7.24-1.el7.x86_64.rpm   6.启动mysql
1  service mysqld start   7.</description>
    </item>
    
    <item>
      <title>虚拟机安装 centos</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-centos/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-centos/</guid>
      <description>虚拟机安装 centos  路线图
主机(宿主机) &amp;mdash;&amp;gt; centos &amp;ndash;&amp;gt; docker &amp;ndash;&amp;gt; docker 镜像 &amp;ndash;&amp;gt; docker 容器 &amp;mdash; docker 服务
 1.前期准备  一台 主机 或者一台有虚拟软件的 主机 虚拟软件(vm, oracle vm virtualBox) 有centos镜像(最小化安装的centos)  2. 下载centos镜像  查询下载地址 https://mirrors.tuna.tsinghua.edu.cn/ 下载地址: https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso  3. 配置centos镜像 3.1 新建虚拟机信息 3.2 编辑虚拟机名称 3.3 配置虚拟机内存大小 3.4 配置虚拟硬盘 选择新建 3.5 配置虚拟硬盘文件类型 3.6 配置虚拟硬盘大小 3.7 选择虚拟硬盘 就是下载好的centos镜像 3.7.1选择后的图 4. 安装centos7 4.1开始安装centos 选择第一个 install centos 7 4.2 系统语言选择 选择英文 4.3 进去后第一个画面 4.</description>
    </item>
    
    <item>
      <title>重新认识mysql</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/09.%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86mysql/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/09.%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86mysql/</guid>
      <description>[toc]
mysql 的客户端和服务端结构 客户端负责接收用户的命令，并且发送给服务端
服务端负责接收客户端的命令，并进行处理，返回给客户端
bin目录下的可执行文件 unix环境下启动mysql server mysqld
mysqld 这个可执行文件就代表着 MySQL 服务器程序，运行这个可执行文件就可以直接启动一个服务器进程。但这个命令不常用，我们继续往下看更牛逼的启动命令。
mysqld_safe
mysqld_safe 是一个启动脚本，它会间接的调用 mysqld ，而且还顺便启动了另外一个监控进程，这个监控进程在服务器进程挂了的时候，可以帮助重启它。另外，使用 mysqld_safe 启动服务器程序时，它会将服务器程序的出错信息和其他诊断信息重定向到某个文件中，产生出错日志，这样可以方便我们找出发生错误的原因。 mysql.server
mysql.server 也是一个启动脚本，它会间接的调用 mysqld_safe ，在调用 mysql.server 时在后边指定 start参数就可以启动服务器序了，就像这样：
mysql.server start
需要注意的是，这个 mysql.server 文件其实是一个链接文件，它的实际文件是 ../support-files/mysql.server。我使用的 macOS 操作系统会帮我们在 bin 目录下自动创建一个指向实际文件的链接文件，如果你的操作系统没有帮你自动创建这个链接文件，那就自己 创建一个呗～ 别告诉我你不会创建链接文件，上网搜搜呗～
另外，我们还可以使用 mysql.server 命令来关闭正在运行的服务器程序，只要把 start 参数换成 stop 就好了：
1  mysql.server stop   mysqld_multi
其实我们一台计算机上也可以运行多个服务器实例，也就是运行多个 MySQL 服务器进程。 mysql_multi 可执行文件可以对每一个服务器进程的启动或停止进行监控。这个命令的使用比较复杂，本书主要是为了讲清楚 MySQL 服务器和客户端运行的过程，不会对启动多个服务器程序进行过多唠叨。
windows下启动mysql server 手动启动
双击bin目录下mysqld文件即可
以服务的方式启动
有些时候需要长时间运行程序或者开机自启某些程序，这时候就需要把这个程序注册为windows服务
1  &amp;#34;完整的可执行文件路径&amp;#34; --install [-manual] [服务名]   其中的 -manual 可以省略，加上它的话表示在 Windows 系统启动的时候不自动启动该服务，否则会自动启动。</description>
    </item>
    
    <item>
      <title>防火墙firewalld</title>
      <link>http://127.0.0.1:1313/hugo/linux/%E9%98%B2%E7%81%AB%E5%A2%99firewalld/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:03 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/%E9%98%B2%E7%81%AB%E5%A2%99firewalld/</guid>
      <description>centos7上的firewalld 的使用  一、firewalld的基本启动关闭命令  启动服务&amp;mdash;&amp;mdash;systemctl start firewalld 关闭服务&amp;mdash;&amp;mdash;systemctl stop firewalld 查看状态&amp;mdash;&amp;mdash;systemctl status firewalld 开机禁用&amp;mdash;&amp;mdash;systemctl disable firewalld 开机启用&amp;mdash;&amp;mdash;systemctl enable firewalld  二、firewalld的基本配置命令  查看所有打开的端口 &amp;mdash;&amp;ndash;firewall-cmd &amp;ndash;zone=public &amp;ndash;list-ports 更新防火墙规则 &amp;mdash;-（添加后必须更新）&amp;mdash;&amp;ndash;firewall-cmd &amp;ndash;reload 查看版本：&amp;mdash;&amp;mdash; firewall-cmd &amp;ndash;version 查看帮助：&amp;mdash;&amp;mdash; firewall-cmd &amp;ndash;help  三、firewalld常用规则命令  添加udp端口的1234 &amp;mdash;&amp;ndash; firewall-cmd &amp;ndash;zone=public &amp;ndash;add-port=1234/udp &amp;ndash;permanent （&amp;ndash;permanent永久生效，没有此参数重启后失效） 添加tcp端口的8080 &amp;mdash;&amp;ndash; firewall-cmd &amp;ndash;zone=public &amp;ndash;add-port=8080/tcp 查看tcp端口的8080 &amp;mdash;&amp;ndash; firewall-cmd &amp;ndash;zone= public &amp;ndash;query-port=8080/tcp 删除tcp端口的8080 &amp;mdash;&amp;ndash; firewall-cmd &amp;ndash;zone= public &amp;ndash;remove-port=8080/tcp &amp;ndash;permanent  四.firewalld 常用family命令 firewall-cmd &amp;ndash;permanent &amp;ndash;add-rich-rule=&amp;ldquo;rule family=&amp;ldquo;ipv4&amp;rdquo; source address=&amp;ldquo;192.</description>
    </item>
    
    <item>
      <title>2022</title>
      <link>http://127.0.0.1:1313/hugo/about/dream/xcb/2022/</link>
      <pubDate>Mon, 21 Mar 2022 10:17:40 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dream/xcb/2022/</guid>
      <description>一月  1.展示多少信息给前端 （如何跟hug结合） 2.完成darwio的研究 看看是否能私有化部署 3.deepin安装第三方安卓应用操作步骤 （作废了）  二月  1.创建6台虚拟机 90 91 92 93 94 95 2.6台机器搭建k8s 3.linux的service学习 (单文件)  三月  1.看完王牌部队 2.vercel 部署有问题 k8s这个文件 没有上去 3.外网可以访问k8s集群(那个展示页面) 4.opensearch 与 linux的service 配置和结合 5.linux的service学习 (扩展功能)  四月  1.搞定win10的彻底更新秘诀 https://blog.csdn.net/jianai0602/article/details/100114828 https://blog.csdn.net/weixin_44545251/article/details/101018974 2.验证是否gitea备份时候可行 3.验证pgsql的备份是否可行 4.fcitx5什么情况 5.zerotier 配合 openwrt 完成异地 组网 https://wiki.deepin.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95#fcitx.E4.BD.BF.E7.94.A8.E4.B8.8E.E5.AE.9A.E5.88.B6  </description>
    </item>
    
    <item>
      <title>Server</title>
      <link>http://127.0.0.1:1313/hugo/about/server/</link>
      <pubDate>Mon, 21 Mar 2022 10:13:53 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/server/</guid>
      <description>zh  10.168.2.31  cwz  10.168.2.51  zxq  10.168.2.52 10.168.2.53 10.168.2.54  zlp  10.168.2.55 10.168.2.56 10.168.2.57  不知道是啥  10.168.2.59  xcb nginx ,cloudreve  10.168.2.60  ddns  10.168.2.61  pgsql  10.168.2.62 内部访问 千万别乱搞  gitea  10.168.2.65  drone  10.168.2.66  drone-runner  10.168.2.67  drone-runner  10.168.2.68  drone-runner  10.168.2.69  copy  模板机 10.168.2.70  nginx  外网 转发服务器 10.168.2.71  gitlab  10.</description>
    </item>
    
    <item>
      <title>Zerotier</title>
      <link>http://127.0.0.1:1313/hugo/network/zerotier/</link>
      <pubDate>Wed, 16 Mar 2022 13:51:06 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/network/zerotier/</guid>
      <description>zerotier centos7安装zerotier  安装  curl -s https://install.zerotier.com/ | sudo bash   加入网络  sudo zerotier-cli join NetworkID   查看网络信息  zerotier-cli info    </description>
    </item>
    
    <item>
      <title>Service</title>
      <link>http://127.0.0.1:1313/hugo/linux/service/</link>
      <pubDate>Tue, 15 Mar 2022 10:54:23 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/service/</guid>
      <description>linux的Service之旅 1.service 服务权限  systemd有系统和用户区分；  系统（/user/lib/systemd/system/） 用户（/etc/lib/systemd/user/）     一般系统管理员手工创建的单元文件建议存放在/etc/systemd/system/目录下面。
 2.Service 文件说明 1 2 3 4 5 6 7 8 9 10 11 12 13 14  [Unit] Description=nginx - high performance web server Documentation=http://nginx.org/en/docs/ After=network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target   2.1 Unit  Description: 服务的简单描述 Documentation：服务的操作文档地址 Before: 定义启动顺序  Before=xxx.</description>
    </item>
    
    <item>
      <title>2022</title>
      <link>http://127.0.0.1:1313/hugo/about/dream/cwz/2022/</link>
      <pubDate>Fri, 11 Mar 2022 19:06:24 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dream/cwz/2022/</guid>
      <description>一月  1.jadx反编译解析apk完成静态分析、动态分析 2.java调用python执行jadx解析  二月 nginx-modules  1.helper完成todo模块(前后端)(后端已完成，前端先放一放，背面试题) 2.helper完成redis数据展示以及设置(前后端) 3.学习velocity(先放一放，背面试题) 4.helper使用velocity解析vm模板完成代码生成(先放一放，背面试题) 5.JAVA 多线程并发 面试题学习 6.JAVA 集合 面试题学习  三月  1.helper实现动态连接sql数据库解析vm模板代码生成(先放一放，背面试题) 2.helper实现根据web版本vm模板动态连接sql数据库代码生成(先放一放，背面试题) 7.MySql 学习 并提交md文档  </description>
    </item>
    
    <item>
      <title>2022</title>
      <link>http://127.0.0.1:1313/hugo/about/dream/zxq/2022/</link>
      <pubDate>Sun, 06 Mar 2022 15:56:53 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dream/zxq/2022/</guid>
      <description>oneManager
一月 oneManager的java版
 分页列表 定时任务 将指定目录网盘数据，交给es,es并创建索引 （了解FlexSearch.js） 文件的上传，删除 netty学习（基础api） 定时任务 将指定目录网盘数据，交给es,es并创建索引 （了解FlexSearch.js）  二月  看完《mySql是如何运行的》，记录下看懂的知识点。  三月  延时队列对比（redis,rabbitMq） 搭建taro的demo 利用auto.js记录账单 看完《spring揭秘》 记录下看懂的知识点。  </description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>http://127.0.0.1:1313/hugo/install/k8s/</link>
      <pubDate>Thu, 17 Feb 2022 11:22:24 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/k8s/</guid>
      <description>k8s 安装 1. 安装前装备 1.1 检查 centos 1  cat /etc/redhat-releas   1.2 检查hostname   此处hostname的输出将会是该机器在K8s 集群中的名字
1  hostnamectl set-hostname &amp;lt;newhostname&amp;gt;     1.3 检查CPU的信息   Architecture: x86_64
  CPU(s): 2
1  lscpu     1.4 检查网卡信息   ip route show
  可以得知图中 默认的网卡为eth0
  ip address (相关命令)
  保证 k8s的节点的ip 相互之间能ping (无需 NAT 映射、无安全组或防火墙隔离)
  1.</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>http://127.0.0.1:1313/hugo/docker/k8s/</link>
      <pubDate>Thu, 20 Jan 2022 15:41:30 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/k8s/</guid>
      <description>获取节点和服务版本信息 kubectl get nodes
获取节点和服务版本信息，并查看附加信息 kubectl get nodes -o wide
获取pod信息，默认是default名称空间 kubectl get pod
获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】 kubectl get pod -o wide
获取指定名称空间的pod kubectl get pod -n kube-system
获取指定名称空间中的指定pod kubectl get pod -n kube-system podName
获取所有名称空间的pod kubectl get pod -A
查看pod的详细信息，以yaml格式或json格式显示 kubectl get pods -o yaml kubectl get pods -o json
查看pod的标签信息 kubectl get pod -A &amp;ndash;show-labels
根据Selector（label query）来查询pod kubectl get pod -A &amp;ndash;selector=&amp;ldquo;k8s-app=kube-dns&amp;rdquo;
查看运行pod的环境变量 kubectl exec podName env
查看指定pod的日志 kubectl logs -f &amp;ndash;tail 500 -n kube-system kube-apiserver-k8s-master</description>
    </item>
    
    <item>
      <title>2021</title>
      <link>http://127.0.0.1:1313/hugo/about/dream/xcb/2021/</link>
      <pubDate>Wed, 12 Jan 2022 10:38:18 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dream/xcb/2021/</guid>
      <description>任务:  1.gitlab服务器备份 （1天一备份 （保留30份） 一周大备份一次 永久保存） 2.nexus备份 （7天备份一次（保留4分），1个月一次（永久保存）） 3.drone 镜像镜像自动更新 4.pve的基本操作命令 5.博客与gitee 打通 (无法自动更新) 6.图片服务器与gitee 形成双边备份和获取 （无法自动更新所以不搞了） 7.了解gitee的图床 8.创建picgo的镜像 9.编写goserver 接受图片 返回图片地址 10.制作golang镜像 11.结合picgo的镜像 与 原来上传结合 + gitee的图床上传 (用api替代了) 12.编写go 接收img 保存到本地 并转发文件到gitee 返回gitee访问地址到客户端 13.openwrt 配置 v2ray 14.win10 通过openwrt 连接到互联网 15.搭建jellyfin 影视中心 (需要先有电影) 16.创建三台稳定的虚拟机 85 86 87 17.在稳定的三台虚拟机上搭建opensearch(ES) 18.把hugo博客内容与ES打通 19.postman请求 ES内容 20.了解clash 一种代理 21.ddns 需要自定义域名 与本地绑定 22.搭建稳定版的mysql 让外面不能访问 修改密码(现在不需要) 23.搭建gitea ssl 24.搭建drone 25.搭建drone-runner 26.测试push 27.搭建稳定版的pgsql 外网不能访问 28.nginx 配置 docker group pull 和push分开 29.</description>
    </item>
    
    <item>
      <title>Ago</title>
      <link>http://127.0.0.1:1313/hugo/about/dream/xcb/ago/</link>
      <pubDate>Wed, 12 Jan 2022 10:38:18 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dream/xcb/ago/</guid>
      <description>约束自己的成长之路 20200923    等会关电脑     看斗鱼 打开了又关了 少于20分钟     没有午睡     等下在做20个    20200922    没关电脑 在修电脑     看斗鱼 打开了又关了 少于5分钟     没有午睡     做了20个    20200921    等会关电脑     看斗鱼 打开了又关了 少于5分钟     没有午睡     做了10个 等下在做10个    第一周计划20200921&amp;mdash;&amp;mdash;20200927  学习计划  无   其他计划  11点之前 离开 关闭电脑+手机 （如有特殊情况需要报备 ，没报备 20元一次 每次翻倍） www.</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>http://127.0.0.1:1313/hugo/db/mysql/</link>
      <pubDate>Thu, 06 Jan 2022 14:08:32 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mysql/</guid>
      <description>mysql相关命令 备份哦 1  mysqldump -h 127.0.0.1 -P 3306 -u remote -p123456 --databases test &amp;gt; ./backdb.sql   </description>
    </item>
    
    <item>
      <title>Pgsql</title>
      <link>http://127.0.0.1:1313/hugo/db/pgsql/</link>
      <pubDate>Thu, 06 Jan 2022 14:08:32 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/pgsql/</guid>
      <description>pgsql相关命令 备份命令 1  /home/htga/postgres/pgsql-9.6.5/bin/pg_dump -F c -O -U htga -h 127.0.0.1 -p 5432 -f /mnt/longdisk/bak/data/dbase_backup_$DATE_TIME.dmp htga   </description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>http://127.0.0.1:1313/hugo/bigdata/zookeeper/</link>
      <pubDate>Thu, 06 Jan 2022 14:08:32 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/bigdata/zookeeper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Config</title>
      <link>http://127.0.0.1:1313/hugo/docker/config/</link>
      <pubDate>Thu, 06 Jan 2022 11:52:44 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/config/</guid>
      <description>daemon.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  { &amp;#34;api-cors-header&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;authorization-plugins&amp;#34;:[], &amp;#34;bip&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;bridge&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cgroup-parent&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cluster-store&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;cluster-store-opts&amp;#34;:{}, &amp;#34;cluster-advertise&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;debug&amp;#34;: true, #启用debug的模式，启用后，可以看到很多的启动信息。默认false &amp;#34;default-gateway&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;default-gateway-v6&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;default-runtime&amp;#34;:&amp;#34;runc&amp;#34;, &amp;#34;default-ulimits&amp;#34;:{}, &amp;#34;disable-legacy-registry&amp;#34;:false, &amp;#34;dns&amp;#34;: [&amp;#34;192.</description>
    </item>
    
    <item>
      <title>Chronyd</title>
      <link>http://127.0.0.1:1313/hugo/install/chronyd/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/chronyd/</guid>
      <description>Chronyd chronyd是一个同步系统时钟的守护进程。
从Centos7开始默认安装时钟同步服务chronyd，而不是ntpd。
1 2 3  # dnf -y install chronyd # eccho &amp;#39;server ntp1.aliyun.com iburst&amp;#39; &amp;gt;&amp;gt; /etc/chrony.conf # systemctl enable chronyd.service &amp;amp;&amp;amp; systemctl start chronyd.service   Chronyc chronyc is a command-line interface program which can be used to monitor chronyd’s performance and to change various operating parameters whilst it is running.
1 2 3 4 5 6 7 8 9 10 11 12  # chronyc sources -v .</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>http://127.0.0.1:1313/hugo/java/java/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/java/</guid>
      <description>java杂相关 strace
一、java命令 debug 命令 1  -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8089   jvm jstat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  jstat -gc 12698 1s 30 参数说明：S0C：第一个幸存区的大小 S1C：第二个幸存区的大小 S0U：第一个幸存区的使用大小 S1U：第二个幸存区的使用大小 EC：伊甸园区的大小 EU：伊甸园区的使用大小 OC：老年代大小 OU：老年代使用大小 MC：方法区大小 MU：方法区使用大小 CCSC:压缩类空间大小 CCSU:压缩类空间使用大小 YGC：年轻代垃圾回收次数 YGCT：年轻代垃圾回收消耗时间 FGC：老年代垃圾回收次数 FGCT：老年代垃圾回收消耗时间 GCT：垃圾回收消耗总时间   java的keytool keytool相关命令 需要补充 1 2 3 4 5 6 7 8 9 10 11  keytool -genkeypair \ -alias test-jwt \ -validity 3650 \ -keyalg RSA \ -dname &amp;#34;CN=jwt,OU=jtw,O=jtw,L=zurich,S=zurich,C=CH&amp;#34; \ -keypass test123 \ -keystore test-jwt.</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>http://127.0.0.1:1313/hugo/bigdata/kafka/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/bigdata/kafka/</guid>
      <description>kafka命令总结 topic的相关操作 创建topic   创建一个叫做“test”的topic，它只有二个分区，一个副本
  bin/kafka-topics.sh &amp;ndash;create &amp;ndash;zookeeper localhost:2181 &amp;ndash;replication-factor 1 &amp;ndash;partitions 2 &amp;ndash;topic test
   名词 解释     &amp;ndash;zookeeper 后面加zookeeper的地址   &amp;ndash;replication-factor 副本数   &amp;ndash;partitions 分区数   &amp;ndash;topic topic的名字      删除topic  bin/kafka-topics.sh &amp;ndash;delete &amp;ndash;zookeeper localhost:2181 &amp;ndash;topic 【topic name】  修改topic  bin/kafka-topics.sh &amp;ndash;zookeeper localhost:2181 &amp;ndash;alter &amp;ndash;partitions 20 &amp;ndash;topic test 修改topic为test的分区为20  查看topic   bin/kafka-topics.</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>http://127.0.0.1:1313/hugo/install/kafka/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/kafka/</guid>
      <description>kafka集群搭建 下载地址  http://kafka.apache.org/downloads.html  开始部署  进入项目前的目录 cd /home/test/ 创建项目目录 mkdir kafka 进入项目目录 cd /home/test/kafka 创建kafka消息目录，主要存放kafka消息 mkdir kafkalogs 进入项目目录 cd /home/test/kafka 上传 kafka_2.10-0.10.0.0.tgz 安装包 解压 tar zxvf kafka_2.10-0.10.0.0.tgz -C ./ cd /home/test/kafka/kafka_2.11-0.10.0.0/config 打开配置文件 vim server.properties  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  ------------------------配置文件------------------------------------- broker.id=1 /* 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3，这个值是唯一的，每台虚拟机或者叫服务器不能相同。 */ listeners=PLAINTEXT://test01:9092 /设置本机IP和端口。我这里设置的是listeners， 也可以直接设置host.</description>
    </item>
    
    <item>
      <title>Kernel</title>
      <link>http://127.0.0.1:1313/hugo/install/kernel/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/kernel/</guid>
      <description>centos7 更新内核 在 CentOS 7 上启用 ELRepo 仓库 1 2  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm   查询可下载的内核包 1  yum --disablerepo=&amp;#34;*&amp;#34; --enablerepo=&amp;#34;elrepo-kernel&amp;#34; list available   安装 1  yum --enablerepo=elrepo-kernel install kernel-ml   查看是否安装成功 1  rpm -qa |grep kernel   </description>
    </item>
    
    <item>
      <title>LetusEncrypt</title>
      <link>http://127.0.0.1:1313/hugo/network/letusencrypt/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/network/letusencrypt/</guid>
      <description>1.http与https  简单的说:  https = http+ssl(安全访问) https 比较安全    2.Let&amp;rsquo;s Encrypt  想要 https 就是购买证书 在 Let&amp;rsquo;s Encrypt可以免费申请证书 官网  3.Certbot  Let&amp;rsquo;s Encrypt 官网提供的服务端的API 但是 作为使用者 还是别去研究API 官网有很多语言的客户端的 (java,go) 官网要推荐的客户端 cerbot  4.开启 Certbot 之旅  好像有多种模式 ,多种插件 (多条岔路容易错误) 无插件 certbot 完成对SSL证书的 申请和续约  4.1 准备环境  系统 debian (debian:buster-slim) 需要能连接互联网 会用apt命令  4.2 安装certbot  更新 apt 源索引 apt update 安装 certbot  apt install certbot    4.</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>http://127.0.0.1:1313/hugo/install/mysql/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/mysql/</guid>
      <description>mysql 相关 安装 mysql 相关   查看mariadb数据库 rpm -qa | grep mariadb
  卸载数据库：yum -y remove mari*
  删除数据库文件： rm -rf /var/lib/mysql/*
  根据某某安装
 根据rpm安装  1 2 3 4 5 6  rpm -ivh mysql-community-common-5.7.24-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-5.7.24-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.24-1.el7.x86_64.rpm rpm -ivh mysql-community-server-5.7.24-1.el7.x86_64.rpm rpm -ivh mysql-community-devel-5.7.24-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-compat-5.7.24-1.el7.x86_64.rpm    yum 安装  wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm yum -y install mysql57-community-release-el7-10.noarch.rpm yum -y install mysql-community-server      启动 mysql</description>
    </item>
    
    <item>
      <title>Navicat</title>
      <link>http://127.0.0.1:1313/hugo/install/navicat/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/navicat/</guid>
      <description>navicat安装环境 install capstone sudo apt-get install libcapstone-dev
install keystone 1 2 3 4 5 6 7 8 9  sudo apt-get install cmake wget http://10.168.2.83:10099/keystone.tar.gz tar -zxvf keystone.tar.gz cd keystone mkdir build cd build ../make-share.sh sudo make install sudo ldconfig   install rapidjson 1  sudo apt-get install rapidjson-dev   install openssl 1 2 3 4 5 6  sudo apt-get install openssl sudo apt install libssl-dev wget http://10.</description>
    </item>
    
    <item>
      <title>README</title>
      <link>http://127.0.0.1:1313/hugo/bigdata/hadoop/readme/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/bigdata/hadoop/readme/</guid>
      <description>hadoop 相关技术  获取某个application的 日志  1  yarn logs -applicationId application_1593492224442_0003 &amp;gt;./yarn.log   ./hadoop jar ../share/hadoop/mapreduce/hadoop-mapreduce-examples-2.5.1.jar pi 5 10</description>
    </item>
    
    <item>
      <title>sed</title>
      <link>http://127.0.0.1:1313/hugo/linux/sed/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/sed/</guid>
      <description>[toc]
sed命令简介 sed处理时，有2个缓冲区：【pattern space】和【hold space】
sed执行过程： 先读入一行，去掉尾部换行符，存入【pattern space】，执行编辑命令。
处理完毕，除非加了-n参数，把现在的【pattern space】打印出来，在后边打印曾去掉的换行符。
把【pattern space】置空。 接着读下一行，处理下一行。
sed的默认输出：【pattern space】里的内容输出到标准输出。
sed的常用选项：   【pattern space】里的内容不输出到标准输出：-n
  默认只能执行一个脚本，执行多个脚本：-e script, &amp;ndash;expression=script
可以有多个-e script
  如果要执行的脚本特别多，可以指定一个脚本文件：-f /path/to/sed_scirpt
脚本文件里，每行一个编辑命令。
  支持使用扩展的正则表达式，默认是基本正则表达式：-r
  直接编辑原文件：-i
  把【pattern space】空间中的内容覆盖到【hold space】空间：h
  把【pattern space】空间中的内容追加到【hold space】空间，然后删除【pattern space】空间中的内容：H
  把【hold space】空间中的内容覆盖到【pattern space】空间：g
  把【hold space】空间中的内容追加到【pattern space】空间，然后删除【hold space】空间中的内容：G
  互换【hold space】【pattern space】里的内容：x
  把匹配到的行的下一行放入【pattern space】，并把匹配到的行删除掉：n
  把匹配到的行的下一行放入【pattern space】，不删除匹配到的行：N</description>
    </item>
    
    <item>
      <title>VirtualBox</title>
      <link>http://127.0.0.1:1313/hugo/install/virtualbox/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/virtualbox/</guid>
      <description>centos7.8 虚拟机 查看自己的内核  这个是可以安装的 内核版本 小版本也要对应  1 2 3 4 5 6 7 8  [root@localhost sdb]# rpm -qa |grep kernel kernel-3.10.0-1127.el7.x86_64 kernel-tools-libs-3.10.0-1127.el7.x86_64 kernel-headers-3.10.0-1127.19.1.el7.x86_64 kernel-devel-3.10.0-1127.19.1.el7.x86_64 kernel-devel-3.10.0-1127.el7.x86_64 abrt-addon-kerneloops-2.1.11-57.el7.centos.x86_64 kernel-tools-3.10.0-1127.el7.x86_64   添加VirtualBox安装源 1 2 3  cd /etc/yum.repos.d/ yum install wget wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo   安装 1 2  yum update yum install binutils qt gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms   记得对应版本安装 kernel  版本下表  1 2 3 4 5  kernel-3.</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>http://127.0.0.1:1313/hugo/install/zookeeper/</link>
      <pubDate>Wed, 05 Jan 2022 14:57:20 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/install/zookeeper/</guid>
      <description>zookeeper集群搭建 一、下载zookeeper  进入将要安装的目录 cd /home/htga/zookeeper wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz  二、解压  tar -zxvf zookeeper-3.4.14.tar.gz  三、复制配置文件名称  cd zookeeper-3.4.14/conf/ cp zoo_sample.cfg zoo.cfg  四、修改配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  # The number of milliseconds of each tick tickTime=2000 # The number of ticks that the initial # synchronization phase can take initLimit=10 # The number of ticks that can pass between # sending a request and getting an acknowledgement syncLimit=5 # the directory where the snapshot is stored.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://127.0.0.1:1313/hugo/software/markdown/</link>
      <pubDate>Wed, 05 Jan 2022 10:37:26 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/markdown/</guid>
      <description>markdown学习总结 标题的使用   一级标题：使用&amp;quot;=&amp;ldquo;显示一级标题
我展示的是一级标题 ====      二级标题：使用&amp;rdquo;-&amp;ldquo;显示二级标题
 我展示的是二级标题 -      用#号表示标题等级，#号个数代表标题等级
 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题    段落的使用 这是一个段落 这是第二个段落  列表的使用 无序列表（* + -）  第一项 第二项 第三项   第一项 第二项 第三项   第一项 第二项 第三项  有序列表（数字并加上 . 号来表示）  第一项 第二项 第三项  列表嵌套  第一项：  第一项嵌套的第一个元素 第一项嵌套的第二个元素   第二项：  第二项嵌套的第一个元素 第二项嵌套的第二个元素    markdown区块 一个 &amp;gt; 符号是最外层，两个 &amp;gt; 符号是第一层嵌套，以此类推退  区块中加无序列表   最外层    第一层嵌套    第二层嵌套    第三层嵌套      区块中加有序列表   最外层    第一层嵌套 第一层嵌套 第一层嵌套    第二层嵌套    第三层嵌套 第三层嵌套      列表中使用区块  第一项  菜鸟教程 学的不仅是技术更是梦想</description>
    </item>
    
    <item>
      <title>Idea</title>
      <link>http://127.0.0.1:1313/hugo/software/idea/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/idea/</guid>
      <description>idea疯狂飞起来 一、设置需要跳过的debug 1  File | Settings | Build, Execution, Deployment | Debugger | Stepping   二 生成javadoc  按钮路径 Tools | Generate javadoc 参考设置   </description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>http://127.0.0.1:1313/hugo/software/jenkins/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/jenkins/</guid>
      <description>jenkins 说明文档 1. 彻底修改更新源 1 2 3 4 5  修改源 sed -i &amp;#39;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&amp;#39; /root/.jenkins/updates/default.json 修改搜索 sed -i &amp;#39;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&amp;#39; /root/.jenkins/updates/default.json   2. 启动命令 1  nohup java -jar jenkins.war JENKINS_UC_DOWNLOAD=https://mirrors.tuna.tsinghua.edu.cn/jenkins/ --httpPort=8081 &amp;gt; jenkin.log 2&amp;gt;&amp;amp;1 &amp;amp;   3.常用插件 1 2 3 4 5 6  Localization: Chinese (Simplified) 中文 Maven Integration maven的插件 Git client GitBlit Git git的插件 Subversion svn插件   </description>
    </item>
    
    <item>
      <title>Npm</title>
      <link>http://127.0.0.1:1313/hugo/node/npm/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/node/npm/</guid>
      <description>npm安装 设置软件默认安装位置 1  npm config set prefix &amp;#34;D:\Program Files\nodejs\node_global&amp;#34;   设置软件 缓存位置 1  npm config set cache &amp;#34;D:\Program Files\nodejs\node_cache&amp;#34;   设置镜像源 1  npm config set registry=http://registry.npm.taobao.org   npm 私有仓库 1、在命令行先查看 npm config get registry
2、修改本地或者tb镜像（搭建私服教程点这里 ） 淘宝镜像npm config set registry http://registry.npm.taobao.org/或 官方镜像npm config set registry https://registry.npmjs.org/或 个人镜像npm config set registry http://10.168.2.76:38081/repository/npm-all/(这里地址自行改成自己配置的地址)
3、验证配置镜像 npm -loglevel info install grunt</description>
    </item>
    
    <item>
      <title>Photoshop</title>
      <link>http://127.0.0.1:1313/hugo/software/photoshop/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/photoshop/</guid>
      <description>photoshop 快捷键 总结 1.操作图层 ctrl +t</description>
    </item>
    
    <item>
      <title>Typora</title>
      <link>http://127.0.0.1:1313/hugo/software/typora/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/typora/</guid>
      <description>typora 图片问题 [toc]
一.typora 困惑  本身typora 可以 复制粘贴 图片 进行显示图片 做笔记 如果你把这个markdown源文件发送给你的小伙伴的时候他不能看见    ../AppData/Roaming/Typora/typora-user-images/image-20200607174432319.png 这个是下面这张图片的地址
是相对地址 只有你自己能够访问 无法分享
   https://xxx.xxx.com:port/markdown/img/2020-06-07/174524_d0306553f4.png 像这样地址 你的小伙子就可以访问喽  先把图片放到网上 然后把访问地址 填写到图片信息中 （这种方案太麻烦了，比较费时费事，轻松解决方案请看下面）  二、 typora 与picGo 结合 解决图片方案 1. 下载picGO  地址： https://github.com/Molunerfinn/PicGo/releases 请下载对应的版本   2. 安装picGo   下载的 picGo安装包   双击进行安装   选择安装位置 点击安装   安装完成 运行   设置picgo
  进行插件设置 且下载需要的插件 （额外的插件可以进行官网查询：）</description>
    </item>
    
    <item>
      <title>Webstorm</title>
      <link>http://127.0.0.1:1313/hugo/software/webstorm/</link>
      <pubDate>Wed, 05 Jan 2022 10:09:48 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/software/webstorm/</guid>
      <description>webstorm 设置合集 不自动打开项目 File → Setting → Appearance &amp;amp; Behavior → System Settings取消勾选Reopen last project on startup</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>http://127.0.0.1:1313/hugo/docker/docker-compose/</link>
      <pubDate>Tue, 04 Jan 2022 20:42:14 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/docker-compose/</guid>
      <description>docker-compose 的相关说明 docker-compose.yml 文件说明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82  # common.</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>http://127.0.0.1:1313/hugo/docker/dockerfile/</link>
      <pubDate>Tue, 04 Jan 2022 19:24:44 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/docker/dockerfile/</guid>
      <description>dockerfile [toc]
1.例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85  # 选择一个已有的os镜像作为基础 FROM docker.</description>
    </item>
    
    <item>
      <title>搜索功能</title>
      <link>http://127.0.0.1:1313/hugo/search/</link>
      <pubDate>Thu, 23 Dec 2021 15:05:41 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/search/</guid>
      <description>叟起来</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>http://127.0.0.1:1313/hugo/about/blog/</link>
      <pubDate>Mon, 20 Dec 2021 17:42:14 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/blog/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14  flowchart TB A[git-client]&amp;lt;--&amp;gt;B[git-server-gitea] B--&amp;gt;C[drone] C--&amp;gt;D[github] C--&amp;gt;vercel D--&amp;gt;netlify C--go-OS-Client--&amp;gt;E[openSearch] F[blogweb] &amp;lt;----&amp;gt; G[go-blogserver] E&amp;lt;--正在实现--&amp;gt;G   </description>
    </item>
    
    <item>
      <title>Dongshanxia</title>
      <link>http://127.0.0.1:1313/hugo/about/dongshanxia/</link>
      <pubDate>Mon, 20 Dec 2021 17:42:14 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/dongshanxia/</guid>
      <description>个人介绍  出生: 1995.04 住址: 杭州市滨江区 电话: 13395753926 邮箱: 984801940@qq.com  教育背景    时间 学校 专业     2014.09-2018.07 洛阳理工学院 计算机科学与技术    掌握技能  严格遵守Java开发规范，有良好的面向对象的业务分析能力，代码书写简洁，力求完美开发。 了解jvm 以及 几种常见的jvm的垃圾回收机制 熟练运用Spring和ioc的加载过程 熟练掌握MySql，了解mysql的索引 精通使用kafka，kafka调优，spark,spark调优等大数据技术。 熟练使用SpringMVC，Springboot，Spring Cloud等Spring全家桶系列框架。 熟练使用 PostgreSQL, Redis等数据库和mybatis，mybatisPlus，jdbc等持久层开发技术. 熟练使用fastDFS，Cloudreve等文件存储服务技术。 熟练使用zookeeper , hadoop , hbase , Elasticsearch，Kerboros等技术工具进行开发。 熟练使用maven项目版本，打包和依赖管理工具 熟练使用linux操作系统，网络配置，shell脚本 (grep , sed , awk） 熟练使用docker镜像的分层，docker-compose和docker命令简单使用 熟练使用gitlab和gitlab_ci简单使用 熟悉k8s（正在学习） 熟练使用netty, netty-websock 熟悉Nginx等web服务器。 熟练使用idea，Eclipse开发工具和Git，SVN版本控制工具。 了解go,用go语言写leetcode 会使用异地组网 (蒲公英,zerotier) 博客地址 (见其它补充)  工作经历 杭州合韬科技有限公司  职位: java开发工程师 时间: 2018-03 ~~ 2021-5 职责:  负责公司项目数据接入，分析，入库； Spark , Kafka , Zookeeper集群的维护； Java依赖第三方包的版本进行管理；    浙江火眼金睛数据科技有限公司  职位: 大数据开发工程师 时间: 2021-5 ~~ 2021-8 职责:  负责数据接入和分析   实际事情  安装服务器 维护服务器    项目经历 公安预警系统(西湖指挥中心 六翮凌风)  项目时间:  2018年7月-2020年9月   项目描述:  通过netty,mq,定时任务同步数据库，汇聚到kafka里面，在通过spark 进行规则预警，实时预警推向kafka,数据统计，基础数据入库，redis数据相关性进行分发。(公安具体业务性属于保密信息无法展开)   项目结构  接入层：netty ,ftp,kafka； 分析层：spark； 数据层：MySQL,hbase, PostgreSQL,redis,hadoop。 持久层：MyBatis,jdbc, hbaseUtil； 业务层：Spring 控制层：SpringMVC、Spring SecurityOauth2； 展示层：vue,jsp   负责模块:  前端接入：netty接收tcp和udp的数据，转发ftp数据推向kafka，转发mq数据推向kafka； s三台Kafa集群：kafka topic的基本维护，kafka集群的搭建与基本维护； 15台spark集群：spark程序 分析3W/s左右数据量 预警统计: 对设备的状态及数据量维护。    数据资源中心系统（类似百度网盘的功能)  项目时间:  2020年9月-2021年5月   项目描述:  每个系统都是有一个文件存储和管理的地方，为了解决文件存储 采用了hdfs的文件存储方式，搜索采用了Elasticsearch 进行搜索.</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>http://127.0.0.1:1313/hugo/about/readme/</link>
      <pubDate>Mon, 20 Dec 2021 16:57:54 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/readme/</guid>
      <description>环境准备  需要有hugo的环境  下载项目 hugo地址
创建一个属于某一个的类的文件  hugo new linux/aa.md  最好在项目的根目录执行 linux 相当于文件夹    浏览地址  xcb-github xcb-gitee xcb-netlify-github xcb-vercek-github xcb-home 如果需要自动部署到自己平台 就直接CICD  测试opensearch </description>
    </item>
    
    <item>
      <title>Hive</title>
      <link>http://127.0.0.1:1313/hugo/db/hive/</link>
      <pubDate>Wed, 15 Dec 2021 09:49:52 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/hive/</guid>
      <description>常见hive语句 1、创建hive库 1  createdatabasehive_oracle;  2、选择库 1  usehive_oracle  3、创建数据库 1 2 3 4 5 6 7  CREATETABLE`hive_oracle.xcb_oracle_hive_end_dt`(`xcb_id`bigint,`xcb_number`int,`xcb_timestamp`timestamp,`xcb_varchar2`string)PARTITIONEDBY(`ds`string)  4、简单查询 1  select*fromxcb_oracle_hive_base_dt;（原来有数据的一张表）  5、时间函数  to_date  1  selectxcb_id,to_date(xcb_timestamp)fromxcb_oracle_hive_base_dt;   from_unixtime (这个不行) &amp;mdash;- select from_unixtime(1323308943,’yyyyMMdd’);  1  selectxcb_id,from_unixtime(xcb_timestamp,&amp;#39;yyyyMMdd&amp;#39;)fromxcb_oracle_hive_base_dt;    unix_timestamp
1  selectxcb_id,unix_timestamp(xcb_timestamp,&amp;#39;yyyyMMdd&amp;#39;)fromxcb_oracle_hive_base_dt;    year 返回日期中的年
1  selectxcb_id,year(xcb_timestamp)fromxcb_oracle_hive_base_dt;    month 返回日期中的月份
1  selectxcb_id,month(xcb_timestamp)fromxcb_oracle_hive_base_dt;    day：返回日期中的天</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>http://127.0.0.1:1313/hugo/db/oracle/</link>
      <pubDate>Mon, 13 Dec 2021 16:37:41 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/oracle/</guid>
      <description>时间字段分析  timestamp 精确到秒后面6位 date 精确到秒  </description>
    </item>
    
    <item>
      <title>Leak</title>
      <link>http://127.0.0.1:1313/hugo/java/leak/</link>
      <pubDate>Fri, 10 Dec 2021 16:52:38 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/java/leak/</guid>
      <description>漏洞之 Apache log4j2   版本: 2.0到 2.14.1
  修改成
  1 2 3 4 5 6  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.15.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   </description>
    </item>
    
    <item>
      <title>Zh</title>
      <link>http://127.0.0.1:1313/hugo/about/zh/</link>
      <pubDate>Tue, 07 Dec 2021 15:03:38 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/about/zh/</guid>
      <description>1. hugo入门  git hugo vscodium  2. markdown的图片 解决  picgo gitea(免费图床) typora+picgo+gitea 或者 vscodium+picgo+gitea  3. gitea 创建帐号 [地址：][https://gitea.dongshanxia.top:35000/]
 创建帐号 帐号授权 （跟我说哪个帐号） 拉取hugo 项目代码 本地启动拉取项目  </description>
    </item>
    
    <item>
      <title>Pve</title>
      <link>http://127.0.0.1:1313/hugo/linux/pve/pve/</link>
      <pubDate>Wed, 24 Nov 2021 10:53:51 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/pve/pve/</guid>
      <description>查看集群资源状况  1  pvesh get /cluster/resources   取得虚拟机当前状态 1 2 3  pvesh get /nodes/&amp;lt;节点id&amp;gt;/qemu/&amp;lt;虚拟机id&amp;gt;/status/current pvesh get /nodes/pve/qemu/100/status/current   关闭虚拟机 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  pvesh create /nodes/&amp;lt;节点id&amp;gt;/qemu/&amp;lt;虚拟机id&amp;gt;/status/stop pvesh create /nodes/pve/qemu/990/status/start pvesh create /nodes/pve/qemu/176/status/start pvesh create /nodes/pve/qemu/255/status/start pvesh create /nodes/pve/qemu/201/status/start pvesh create /nodes/pve/qemu/100/status/start pvesh create /nodes/pve/qemu/399/status/start pvesh create /nodes/pve/qemu/103/status/start pvesh create /nodes/pve/qemu/101/status/start pvesh create /nodes/pve/qemu/174/status/start pvesh create /nodes/pve/qemu/104/status/start pvesh create /nodes/pve/qemu/777/status/start pvesh create /nodes/pve/qemu/102/status/start pvesh create /nodes/pve/qemu/173/status/start   挂载img文件 1  qm importdisk 990 /var/lib/vz/template/iso/openwrt-gdq-v9-1_2021_-x86-64-generic-squashfs-uefi.</description>
    </item>
    
    <item>
      <title>Es Ik</title>
      <link>http://127.0.0.1:1313/hugo/es/es-ik/</link>
      <pubDate>Thu, 18 Nov 2021 11:10:36 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/es/es-ik/</guid>
      <description>es-server-ik 1.前提  有一个完美运行的 es集群 es的home 假设为 /eshome eshome=/home/top/es/elasticsearch-7.15.2(隔壁那份es安装文档的对应目录) 每一台es节点都需要执行哦  2.上传ik安装包  把ik 安装包放在可供 es下载的地址 这边直接node60机器的nginx地址 可以直接用github地址的 地址  3.安装ik 1  /$eshome/elasticsearch-plugin install http://10.168.2.60:35000/elasticsearch-analysis-ik-7.15.2.zip   重启ES  stop  1  ps -ef | grep elasticsearch |grep UTF-8| grep -v grep | awk &amp;#39;{print $2}&amp;#39;|xargs kill -9    start  1  /$eshome/bin/elasticsearch -d   </description>
    </item>
    
    <item>
      <title>Mssql</title>
      <link>http://127.0.0.1:1313/hugo/db/mssql/</link>
      <pubDate>Tue, 16 Nov 2021 11:14:50 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/db/mssql/</guid>
      <description>中文问题相关 ALTER DATABASE test COLLATE Chinese_PRC_CI_AS</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>http://127.0.0.1:1313/hugo/linux/deepin/vim/</link>
      <pubDate>Fri, 06 Aug 2021 15:18:50 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/deepin/vim/</guid>
      <description>deepin-vim 针对用户  下载需要的包 到 家目录  1  wget --no-check-certificate https://raw.githubusercontent.com/vim/vim/master/runtime/vimrc_example.vim -O ~/.vimrc   针对全局用户  找到vim的 全局配置路径：   执行vim然后输入:echo $VIMRUNTIME  修改默认配置文件：sudo vim $VIMRUNTIME/defaults.vim 具体可以修改的文件的功能 可以用下面的 保存文件完成修改：  :wq    可以修改的配置 1 2 3 4 5 6 7 8 9 10 11 12 13  #设置语法高亮 echo &amp;#39;syntax on&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启行号显示【标准方式】或上面的【简写方式】也可以 echo &amp;#39;set number&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启行号显示【简写方式】或下面的【标准方式】也可以 echo &amp;#39;set nu&amp;#39; &amp;gt;&amp;gt; ~/.vimrc #开启拼写检查 echo &amp;#39;set spell&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Gitlab</title>
      <link>http://127.0.0.1:1313/hugo/git/gitlab/</link>
      <pubDate>Tue, 13 Jul 2021 15:35:09 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/git/gitlab/</guid>
      <description>gitlab docker-compose  配置文件  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 在工作目录下创建 docker-compose.yml 文件，编辑以下内容version:&amp;#34;3&amp;#34;services:gitlab:image:&amp;#39;gitlab/gitlab-ce:latest&amp;#39;restart:alwayscontainer_name:gitlabports:- &amp;#39;80:80&amp;#39;volumes:- &amp;#39;/docker/software/gitlab/config:/etc/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/logs:/var/log/gitlab&amp;#39;- &amp;#39;/docker/software/gitlab/data:/var/opt/gitlab&amp;#39;environment:TZ:&amp;#39;Asia/Shanghai&amp;#39;GITLAB_OMNIBUS_CONFIG:|external_url &amp;#39;http://127.0.0.1:80&amp;#39;# Add any other gitlab.rb configuration here, each on its own linegitlab_rails[&amp;#39;gitlab_ssh_host&amp;#39;] = &amp;#39;127.0.0.1&amp;#39;# gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 26013   初始密码  1 2  /docker/software/gitlab/config/initial_root_password 查找(docker 挂载出来的路径)   </description>
    </item>
    
    <item>
      <title>Parted</title>
      <link>http://127.0.0.1:1313/hugo/linux/parted/</link>
      <pubDate>Wed, 07 Jul 2021 16:59:24 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/parted/</guid>
      <description>parted 规划分区   进入某个磁盘的分区
 parted /dev/sdb    新建标签类型
  mklabel
  1 2 3 4  (parted) mklabel 新的磁盘标签类型？ gpt 警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue? 是/Yes/否/No? yes       新建分区
  mkpart
  1 2 3 4 5  (parted) mkpart 分区名称？ []?</description>
    </item>
    
    <item>
      <title>Picgo</title>
      <link>http://127.0.0.1:1313/hugo/other/picgo/</link>
      <pubDate>Wed, 07 Jul 2021 14:06:01 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/other/picgo/</guid>
      <description>picgo  地址 : /home/zhu/software/node/node-v14.15.0-linux-x64/bin 文件内容  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/usr/bin/env /home/zhu/software/node/node-v14.15.0-linux-x64/bin/node const path = require(&amp;#39;path&amp;#39;) const minimist = require(&amp;#39;minimist&amp;#39;) const argv = minimist(process.argv.slice(2)) let configPath = argv.c || argv.config || &amp;#39;&amp;#39; if (configPath !== true &amp;amp;&amp;amp; configPath !== &amp;#39;&amp;#39;) { configPath = path.resolve(configPath) } else { configPath = &amp;#39;&amp;#39; } const PicGo = require(&amp;#39;.</description>
    </item>
    
    <item>
      <title>Crontab</title>
      <link>http://127.0.0.1:1313/hugo/linux/crontab/</link>
      <pubDate>Mon, 28 Jun 2021 16:43:52 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/crontab/</guid>
      <description>crontab  查看 crontab -l 编辑  crontab -e   如何配置  1 2 3 4 5 6 7 8  * * * * * - - - - - | | | | | | | | | +----- 星期中星期几 (0 - 6) (星期天 为0) | | | +---------- 月份 (1 - 12) | | +--------------- 一个月中的第几天 (1 - 31) | +-------------------- 小时 (0 - 23) +------------------------- 分钟 (0 - 59)     例子</description>
    </item>
    
    <item>
      <title>Httpd</title>
      <link>http://127.0.0.1:1313/hugo/linux/httpd/</link>
      <pubDate>Mon, 28 Jun 2021 16:28:16 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/httpd/</guid>
      <description>httpd访问网络配置httpd_can_network_connect 检查网络访问的配置
getsebool -a | grep httpd_can_network_connect
如结果如下
httpd_can_network_connect &amp;ndash;&amp;gt; off
则执行如下命令打开：
SELinux命令，临时配置，重启后失效 setsebool httpd_can_network_connect=1
写入配置文件的命令，重启后保留
setsebool -P httpd_can_network_connect 1</description>
    </item>
    
    <item>
      <title>Ssh</title>
      <link>http://127.0.0.1:1313/hugo/linux/ssh/</link>
      <pubDate>Thu, 17 Jun 2021 14:32:19 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/linux/ssh/</guid>
      <description>生成公钥和私钥 1  ssh-keygen -t ed25519 -C &amp;#34;984801940@qq.com&amp;#34;    后面第一个设置名字 后面设置访问密码 （免密当然就是这个）  </description>
    </item>
    
    <item>
      <title>Go_install</title>
      <link>http://127.0.0.1:1313/hugo/go/go_install/</link>
      <pubDate>Fri, 04 Jun 2021 16:50:39 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/go/go_install/</guid>
      <description>go 安装 1.下载地址  https://golang.google.cn/dl/  2.linux安装 1  tar -C /usr/local -xzf go.*.linux-amd64.tar.gz   3. 配置环境变量 1 2  export GO_HOME=/usr/local/go export PATH=$GO_HOME/bin:$PATH   4.生效环境变量 1  source 环境变量文件   </description>
    </item>
    
  </channel>
</rss>
