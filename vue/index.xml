<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vues on </title>
    <link>http://127.0.0.1:1313/hugo/vue/</link>
    <description>Recent content in Vues on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Jan 2022 09:48:52 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/hugo/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue路由</title>
      <link>http://127.0.0.1:1313/hugo/vue/test/vue%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Wed, 05 Jan 2022 09:48:52 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/vue/test/vue%E8%B7%AF%E7%94%B1/</guid>
      <description>一.路由的引入  下载一下就可以了 全局引入 router Vue.use(Router) Vue.use(Router) // Vue全局使用Router   二、路由的配置 import Vue from &#39;vue&#39; // 引入vue import Router from &#39;vue-router&#39; // 引入vue-router import Home from &#39;./views/Home.vue&#39; import About from &#39;./views/About.vue&#39; import aboutRouter from &#39;./views/AboutRouter.vue&#39; import aboutRouter2 from &#39;./views/AboutRouter2.vue&#39; // import Navigation from &#39;vue-navigation&#39; // 这是我的router的切换动画 // Vue.use(Navigation, { Router }) Vue.use(Router) // Vue全局使用Router export default new Router({ routes: [ { // 每一个链接都是一个对象 path: &#39;/&#39;, // 链接路径 name: &#39;home&#39;, // 路由名称 component: Home, // 对应组件的模版 meta: { index: 1, title: &#39;首页&#39;, keepAlive: true } }, { path: &#39;/myAbout&#39;, name: &#39;about&#39;, // 路由名称 component: About, redirect: &#39;/myAbout/children&#39;, // 记得在父路由的地方增加 跳转地址 children: [ { path: &#39;children&#39;, name: &#39;aboutRouter&#39;, component: aboutRouter, meta: { index: 3, title: &#39;子关系&#39;, keepAlive: true } }, { path: &#39;children2&#39;, name: &#39;aboutRouter2&#39;, component: aboutRouter2, meta: { index: 3, title: &#39;子关系&#39;, keepAlive: true } } ] }, { path: &#39;/about&#39;, name: &#39;about&#39;, // route level code-splitting // this generates a separate chunk (about.</description>
    </item>
    
    <item>
      <title>Vue路由</title>
      <link>http://127.0.0.1:1313/hugo/vue/vue%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Wed, 05 Jan 2022 09:48:52 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/vue/vue%E8%B7%AF%E7%94%B1/</guid>
      <description>一.路由的引入  下载一下就可以了 全局引入 router Vue.use(Router) Vue.use(Router) // Vue全局使用Router   二、路由的配置 import Vue from &#39;vue&#39; // 引入vue import Router from &#39;vue-router&#39; // 引入vue-router import Home from &#39;./views/Home.vue&#39; import About from &#39;./views/About.vue&#39; import aboutRouter from &#39;./views/AboutRouter.vue&#39; import aboutRouter2 from &#39;./views/AboutRouter2.vue&#39; // import Navigation from &#39;vue-navigation&#39; // 这是我的router的切换动画 // Vue.use(Navigation, { Router }) Vue.use(Router) // Vue全局使用Router export default new Router({ routes: [ { // 每一个链接都是一个对象 path: &#39;/&#39;, // 链接路径 name: &#39;home&#39;, // 路由名称 component: Home, // 对应组件的模版 meta: { index: 1, title: &#39;首页&#39;, keepAlive: true } }, { path: &#39;/myAbout&#39;, name: &#39;about&#39;, // 路由名称 component: About, redirect: &#39;/myAbout/children&#39;, // 记得在父路由的地方增加 跳转地址 children: [ { path: &#39;children&#39;, name: &#39;aboutRouter&#39;, component: aboutRouter, meta: { index: 3, title: &#39;子关系&#39;, keepAlive: true } }, { path: &#39;children2&#39;, name: &#39;aboutRouter2&#39;, component: aboutRouter2, meta: { index: 3, title: &#39;子关系&#39;, keepAlive: true } } ] }, { path: &#39;/about&#39;, name: &#39;about&#39;, // route level code-splitting // this generates a separate chunk (about.</description>
    </item>
    
    <item>
      <title>Vue杂</title>
      <link>http://127.0.0.1:1313/hugo/vue/vue%E6%9D%82/</link>
      <pubDate>Wed, 05 Jan 2022 09:48:23 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/hugo/vue/vue%E6%9D%82/</guid>
      <description>Vue的学习  ##命令
 vue ui 打开脚手架的ui界面 Vue create 项目名字   Please pick a preset: 选择方式
     default 默认安装
      自定义安装
      自定义解释
     babel：一个javascript转译器，将最新版的js语法（es6、es7）转换为现阶段浏览器可以兼容的js代码
      typescript：作用有些类似于babel，拥有类型检查能力和面向对象新特征。
      PWA：渐进式WEB应用
      Router：路由，设置url，使不同的url显示不同的页面
      Vuex：作用类似于全局对象，但是并不完全相同。</description>
    </item>
    
  </channel>
</rss>
